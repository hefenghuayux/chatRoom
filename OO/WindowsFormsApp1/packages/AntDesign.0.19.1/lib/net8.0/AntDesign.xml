<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AntDesign</name>
    </assembly>
    <members>
        <member name="P:AntDesign.Affix.OffsetBottom">
            <summary>
            Offset from the bottom of the viewport (in pixels)
            </summary>
        </member>
        <member name="P:AntDesign.Affix.OffsetTop">
            <summary>
            Offset from the top of the viewport (in pixels)
            </summary>
        </member>
        <member name="T:AntDesign.Alert">
            <summary>
            Alert component for feedback.
            </summary>
        </member>
        <member name="P:AntDesign.Alert.AfterClose">
            <summary>
            Called when close animation is finished
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Banner">
            <summary>
            Whether to show as banner
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Closable">
            <summary>
            Whether Alert can be closed
            </summary>
        </member>
        <member name="P:AntDesign.Alert.CloseText">
            <summary>
            Close text to show
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Description">
            <summary>
            Additional content of Alert
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Icon">
            <summary>
            Custom icon, effective when showIcon is true
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Message">
            <summary>
            Content of Alert
            </summary>
        </member>
        <member name="P:AntDesign.Alert.ShowIcon">
            <summary>
            Whether to show icon.
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Type">
            <summary>
            Type of Alert styles, options: success, info, warning, error
            </summary>
        </member>
        <member name="P:AntDesign.Alert.OnClose">
            <summary>
            Callback when Alert is closed.
            </summary>
        </member>
        <member name="P:AntDesign.Alert.ChildContent">
            <summary>
            Additional Content
            </summary>
        </member>
        <member name="P:AntDesign.Alert.IconType">
            <summary>
            Icon to show.
            </summary>
        </member>
        <member name="F:AntDesign.Alert._isClosed">
            <summary>
            Indicator if the component is closed or not.
            </summary>
        </member>
        <member name="F:AntDesign.Alert._isClosing">
            <summary>
            Just before we close the component we set this indicator to show a closing animation.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.SetClassMap">
            <summary>
            Sets the default classes.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.OnInitialized">
            <summary>
            Start-up code.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.OnCloseHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the close callback.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Anchor.Key">
            <summary>
            used to refresh links list when the key changed.
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.Affix">
            <summary>
            Fixed mode of Anchor
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.Bounds">
            <summary>
            Bounding distance of anchor area
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.GetContainer">
            <summary>
            Scrolling container
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.OffsetBottom">
            <summary>
            Pixels to offset from bottom when calculating position of scroll
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.OffsetTop">
            <summary>
            Pixels to offset from top when calculating position of scroll
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.ShowInkInFixed">
            <summary>
            Whether show ink-balls in Fixed mode
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.OnClick">
            <summary>
            set the handler to handle click event
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.GetCurrentAnchor">
            <summary>
            Customize the anchor highlight
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.TargetOffset">
            <summary>
            Anchor scroll offset, default as <see cref="P:AntDesign.Anchor.OffsetTop"/>
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Href">
            <summary>
            target of hyperlink
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Title">
            <summary>
            content of hyperlink
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Target">
            <summary>
            Specifies where to display the linked URL
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.AutoCompleteOptions">
            <summary>
            列表对象集合
            List object collection
            </summary>
        </member>
        <member name="F:AntDesign.AutoComplete`1._optionDataItems">
            <summary>
            列表数据集合
            List data collection
            </summary>
        </member>
        <member name="F:AntDesign.AutoComplete`1._options">
            <summary>
            列表绑定数据源集合
            List bound data source collection
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionDataItems">
            <summary>
            绑定列表数据项格式的数据源
            Bind the data source of the list data item format
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionTemplate">
            <summary>
            选项模板
            Option template
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionFormat">
            <summary>
            格式化选项，可以自定义显示格式
            Formatting options, you can customize the display format
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OverlayTemplate">
            <summary>
            所有选项模板
            All option templates
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.CompareWith">
            <summary>
            对比，用于两个对象比较是否相同
            Contrast, used to compare whether two objects are the same
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.FilterExpression">
            <summary>
            过滤表达式
            Filter expression
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.AllowFilter">
            <summary>
            允许过滤
            Allow filtering
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.SelectedItem">
            <summary>
            选择的项
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.ActiveValue">
            <summary>
            高亮的项目
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening). Check
            enum for details.
            </summary>
        </member>
        <member name="M:AntDesign.AutoComplete`1.OpenPanel">
            <summary>
            打开面板
            Open panel
            </summary>
        </member>
        <member name="M:AntDesign.AutoComplete`1.ClosePanel">
            <summary>
            关闭面板
            Close panel
            </summary>
        </member>
        <member name="M:AntDesign.AutoCompleteOption.CalcSelected">
            <summary>
            计算当前计算选择状态
            </summary>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Avatar.Overflow">
            <summary>
            more than group max count
            </summary>
        </member>
        <member name="P:AntDesign.BackTop.TargetSelector">
            <summary>
            回到顶部的目标控件
            </summary>
        </member>
        <member name="T:AntDesign.Badge">
            <summary>
            Small numerical value or status descriptor for UI elements.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Color">
            <summary>
            Customize Badge status dot color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.PresetColor">
            <summary>
            Set Badge status dot to a preset color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Count">
            <summary>
            Number to show in badge
            </summary>
        </member>
        <member name="P:AntDesign.Badge.CountTemplate">
            <summary>
            Template to show in place of Count
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Dot">
            <summary>
            Whether to display a dot instead of count
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Offset">
            <summary>
            Set offset of the badge dot, like (left, top)
            </summary>
        </member>
        <member name="P:AntDesign.Badge.OverflowCount">
            <summary>
            Max count to show
            </summary>
        </member>
        <member name="P:AntDesign.Badge.ShowZero">
            <summary>
            Whether to show badge when count is zero
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Status">
            <summary>
            Set Badge dot to a status color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Text">
            <summary>
            The display text next to the status dot
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Title">
            <summary>
            Text to show when hovering over the badge. Defaults to the value of Count
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Size">
            <summary>
            Size of the badge
            </summary>
        </member>
        <member name="P:AntDesign.Badge.ChildContent">
            <summary>
            Wrapping this item.
            </summary>
        </member>
        <member name="M:AntDesign.Badge.SetClassMap">
            <summary>
            Sets the default CSS classes.
            </summary>
        </member>
        <member name="M:AntDesign.Badge.OnInitialized">
            <summary>
            Startup code
            </summary>
        </member>
        <member name="T:AntDesign.BadgeRibbon">
            <summary>
            Small numerical value or status descriptor for UI elements.
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Color">
            <summary>
            Customize ribbon color
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Text">
            <summary>
            Set text contents of ribbon.
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Placement">
            <summary>
            Set placement of ribbon.
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.ChildContent">
            <summary>
            Wrapping this item.
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.SetClassMap">
            <summary>
            Sets the default CSS classes.
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.OnInitialized">
            <summary>
            Startup code
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.OnParametersSet">
            <summary>
            Runs every time a parameter is set.
            </summary>
        </member>
        <member name="P:AntDesign.Breadcrumb.AutoGenerate">
            <summary>
            Not currently used. Planned for future development.
            </summary>
        </member>
        <member name="P:AntDesign.Breadcrumb.RouteLabel">
            <summary>
            Not currently used. Planned for future development.
            </summary>
        </member>
        <member name="T:AntDesign.BreadcrumbOption">
            <summary>
            Not currently used. Planned for future development.
            </summary>
        </member>
        <member name="P:AntDesign.Button.AriaLabel">
            <summary>
            Sets the value of the aria-label attribute
            </summary>
        </member>
        <member name="P:AntDesign.Button.Color">
            <summary>
            Set the color of the button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Block">
            <summary>
            Option to fit button width to its parent width
            </summary>
        </member>
        <member name="P:AntDesign.Button.ChildContent">
            <summary>
            Content of the button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Danger">
            <summary>
            Set the danger status of button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Disabled">
            <summary>
            Whether the `Button` is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Ghost">
            <summary>
            Make background transparent and invert text and border colors
            </summary>
        </member>
        <member name="P:AntDesign.Button.HtmlType">
            <summary>
            Set the original html type of the button element.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Icon">
            <summary>
            Set the icon component of button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Loading">
            <summary>
            Show loading indicator. You have to write the loading logic on your own.
            </summary>
        </member>
        <member name="P:AntDesign.Button.OnClick">
            <summary>
            Callback when `Button` is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Button.OnClickStopPropagation">
            <summary>
            Do not propagate events when button is clicked.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Shape">
            <summary>
            Can set button shape: `circle` | `round` or `null` (default, which is rectangle).
            </summary>
        </member>
        <member name="P:AntDesign.Button.Size">
            <summary>
            Set the size of button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Type">
            <summary>
            Type of the button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.NoSpanWrap">
            <summary>
            Do not wrap with &lt;span&gt;
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.ParentTrigger">
            <summary>
            Used in nested overlays (for example menu -> submenu) when
            trigger is another overlay.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.Trigger">
            <summary>
            Component that will trigger the overlay to show.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.VerticalOffset">
            <summary>
            vertical offset between Trigger and Overlay, default is 4
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.HorizontalOffset">
            <summary>
            horizontal offset between Trigger and Overlay, default is 4
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.HiddenMode">
            <summary>
            By default Overlay does not render its content if Overlay hasn't been
            activated (shown at least once). Setting HiddenMode = true will
            go through rendering process.
            Use case: Select component, when using <see cref="T:AntDesign.SimpleSelectOption"/> or <see cref="T:AntDesign.SelectOption`2"/>
            needs HiddenMode = true, so the select options are initialized and
            potential defaults can be rendered properly.
            </summary>
        </member>
        <member name="M:AntDesign.Internal.Overlay.UpdateChildState(AntDesign.Internal.Overlay,System.Boolean)">
            <summary>
            set if there any child overlay show or hide
            overlay would not hide if any child is showing
            </summary>
            <param name="child"></param>
            <param name="isChildOverlayShow"></param>
        </member>
        <member name="M:AntDesign.Internal.Overlay.IsHiding">
            <summary>
            when overlay is complete hide, IsPopup return true
            when overlay is hiding(playing hide animation), IsPopup return false, IsHiding return true.
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.Internal.Overlay._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="M:AntDesign.Internal.Overlay.WaitFor(System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Will probe a check predicate every given milliseconds until predicate is true or until
            runs out of number of probings.
            </summary>
            <param name="check">A predicate that will be run every time after waitTimeInMilisecondsPerProbing will pass.</param>
            <param name="probings">Maximum number of probings. After this number is reached, the method finishes.</param>
            <param name="waitTimeInMilisecondsPerProbing">How long to wait between each probing.</param>
            <returns>Task</returns>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening). Check
            enum for details.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.ChildContent">
            <summary>
            Trigger (link, button, etc)
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.ComplexAutoCloseAndVisible">
            <summary>
            自动关闭功能和Visible参数同时生效
            Both auto-off and Visible control close
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Disabled">
            <summary>
            Whether the trigger is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.HiddenMode">
            <summary>
            Property forwarded to Overlay component. Consult the Overlay
            property for more detailed explanation.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.InlineFlexMode">
            <summary>
            (not used in Unbound) Sets wrapping div style to `display: inline-flex;`.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.IsButton">
            <summary>
            Behave like a button: when clicked invoke OnClick
            (unless OnClickDiv is overriden and does not call base).
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnClick">
            <summary>
            Callback when triggger is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMaskClick">
            <summary>
             Callback - equivalent of OnMouseUp event on the trigger trigger.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseEnter">
            <summary>
            Callback when mouse enters trigger boundaries.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseLeave">
            <summary>
            Callback when mouse leaves trigger boundaries.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnOverlayHiding">
            <summary>
            Callback when overlay is hiding.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnVisibleChange">
            <summary>
            Callback when overlay visibility is changing.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Overlay">
            <summary>
            Overlay content (what will be rendered after trigger is activated)
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayClassName">
            <summary>
            Overlay container custom css class.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayEnterCls">
            <summary>
            Css class added to overlay when overlay is shown.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayHiddenCls">
            <summary>
            Css class added to overlay when overlay is hidden.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayLeaveCls">
            <summary>
            Css class added to overlay when overlay is hiding.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayStyle">
            <summary>
            Css style that will be added to overlay div.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.PlacementCls">
            <summary>
            Override default placement class which is based on `Placement` parameter.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.PopupContainerSelector">
            <summary>
            Define what is going to be the container of the overlay.
            Example use case: when overlay has to be contained in a
            scrollable area.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Trigger">
            <summary>
            Trigger mode. Could be multiple by passing an array.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.TriggerReference">
            <summary>
            Manually set reference to triggering element.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Unbound">
            <summary>
            ChildElement with ElementReference set to avoid wrapping div.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Visible">
            <summary>
            Toggles overlay viability.
            </summary>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handle the trigger click.
            </summary>
            <param name="args">MouseEventArgs</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.OnMouseUp(System.Text.Json.JsonElement)">
            <summary>
            on document mouse up
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.Close">
            <summary>
            Will hide the overlay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.IsOverlayShow">
            <summary>
            Checks if overlay is currently in visible state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.SetVisible(System.Boolean)">
            <summary>
            Toggle overlay visibility.
            </summary>
            <param name="visible">boolean: visibility true/false</param>
        </member>
        <member name="M:AntDesign.Internal.DateTimeInputMaskConverter.Convert(System.String,System.String)">
            <summary>
            Convert string value to mask
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Carousel.DotPosition">
            <summary>
            The position of the dots, which can be one of Top, Bottom, Left or Right, <see cref="T:AntDesign.CarouselDotPosition"/>
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.Autoplay">
            <summary>
            Whether to scroll automatically
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.Effect">
            <summary>
            Transition effect, <see cref="T:AntDesign.CarouselEffect"/>
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening)
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.OnChange">
            <summary>
            Please use SelectedNodesChanged instead.
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.InputOnToggle">
            <summary>
            输入框单击(显示/隐藏浮层)
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.CascaderOnBlur">
            <summary>
            输入框/浮层失去焦点(隐藏浮层)
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.ClearSelected">
            <summary>
            清除已选择项
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.NodesOnMouseOver">
            <summary>
            浮层移入
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.NodesOnMouseOut">
            <summary>
            浮层移出
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.NodeOnClick(AntDesign.CascaderNode)">
            <summary>
            下拉节点单击
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AntDesign.Cascader.NodeOnMouseOver(AntDesign.CascaderNode)">
            <summary>
            下拉节点移入
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetSelectedNode(AntDesign.CascaderNode,AntDesign.SelectedTypeEnum)">
            <summary>
            Selected nodes
            </summary>
            <param name="cascaderNode"></param>
            <param name="selectedType"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetSelectedNodeWithParent(AntDesign.CascaderNode,System.Collections.Generic.List{AntDesign.CascaderNode}@)">
            <summary>
            Set all parent nodes to be selected
            </summary>
            <param name="node"></param>
            <param name="list"></param>
        </member>
        <member name="M:AntDesign.Cascader.ProcessParentAndDefault">
            <summary>
            handles parent nodes and defaults after Options updating
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.InitCascaderNodeState(System.Collections.Generic.List{AntDesign.CascaderNode},AntDesign.CascaderNode,System.Int32,System.Boolean)">
            <summary>
            Initialize nodes (Level, ParentNode)
            </summary>
            <param name="list"></param>
            <param name="parentNode"></param>
            <param name="level"></param>
        </member>
        <member name="M:AntDesign.Cascader.RefreshNodeValue(System.String)">
            <summary>
            Refresh the selected value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetDefaultValue(System.String)">
            <summary>
            Set the default value
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetValue(System.String)">
            <summary>
            Set the binding value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Cascader.RefreshDisplayText">
            <summary>
            rebuild the display text
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.GetNodeByValue(System.Collections.Generic.IEnumerable{AntDesign.CascaderNode},System.String)">
            <summary>
            Get the node based on the specified value
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.CheckboxGroup`1.OnCheckboxChange(AntDesign.Checkbox,System.Boolean)">
            <summary>
            Called when [checkbox change].
            </summary>
            <param name="checkbox">The checkbox.</param>
            <param name="invokeOnChange">Flag for whether or not to depart for a change event.</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Collapse.Animation">
            <summary>
            Whether enable the expand/collapse animation
            </summary>
        </member>
        <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
            <summary>
            Standard Focus. From Net5 uses Blazor extension method on ElementReference.
            Before, uses JS implemented exactly the same as Net5 JS.
            </summary>
            <param name="target">Element that will receive focus.</param>
            <param name="preventScroll">Whether to scroll to focused element</param>
        </member>
        <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus with behaviors. Behavior will work only for elements that are
            HTMLInputElement or HTMLTextAreaElement. Otherwise will only focus.
            </summary>
            <param name="target">Element that will receive focus.</param>
            <param name="behavior">Behavior of focused element</param>
            <param name="preventScroll">Whether to scroll to focused element</param>
        </member>
        <member name="M:AntDesign.AntComponentBase.BlurAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Standard Blur. Uses JS interop.
            </summary>
            <param name="target">Element that will receive focus.</param>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            </summary>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Class">
            <summary>
            Specifies one or more class names for an DOM element.
            </summary>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Style">
            <summary>
            Specifies an inline style for a DOM element.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.CheckedChanged">
            <summary>
            Gets or sets a callback that updates the bound checked value.
            </summary>
        </member>
        <member name="T:AntDesign.AntInputComponentBase`1">
            <summary>
            Base class for any input control that optionally supports an <see cref="P:AntDesign.AntInputComponentBase`1.EditContext"/>.
            reference:https://github.com/dotnet/aspnetcore/blob/master/src/Components/Web/src/Forms/InputBase.cs
            </summary>
            <typeparam name="TValue">the natural type of the input's value</typeparam>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.AdditionalAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the created element.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValueChanged">
            <summary>
            Gets or sets a callback that updates the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.Size">
            <summary>
            The size of the input box. Note: in the context of a form,
            the `large` size is used. Available: `large` `default` `small`
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CultureInfo">
            <summary>
            What Culture will be used when converting string to value and value to string
            Useful for InputNumber component.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.EditContext">
            <summary>
            Gets the associated <see cref="P:AntDesign.AntInputComponentBase`1.EditContext"/>.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.FieldIdentifier">
            <summary>
            Gets the <see cref="P:AntDesign.AntInputComponentBase`1.FieldIdentifier"/> for the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CurrentValue">
            <summary>
            Gets or sets the current value of the input.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString">
            <summary>
            Gets or sets the current value of the input, represented as a string.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.InputBase`1"/>.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.FormatValueAsString(`0)">
            <summary>
            Formats the value as a string. Derived classes can override this to determine the formating used for <see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString"/>.
            </summary>
            <param name="value">The value to format.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Parses a string to create an instance of <typeparamref name="TValue"/>. Derived classes can override this to change how
            <see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString"/> interprets incoming values.
            </summary>
            <param name="value">The string value to be parsed.</param>
            <param name="result">An instance of <typeparamref name="TValue"/>.</param>
            <param name="validationErrorMessage">If the value could not be parsed, provides a validation error message.</param>
            <returns>True if the value could be parsed; otherwise false.</returns>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnValueChange(`0)">
            <summary>
            When this method is called, Value is only has been modified, but the ValueChanged is not triggered, so the outside bound Value is not changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnCurrentValueChange(`0)">
            <summary>
            When this method is called, Value and CurrentValue have been modified, and the ValueChanged has been triggered, so the outside bound Value is changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.NameAttributeValue">
            <summary>
            Gets the value to be used for the input's "name" attribute.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.TemplateComponentBase`1">
            <summary>
            
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
        </member>
        <member name="P:AntDesign.TemplateComponentBase`1.Options">
            <summary>
            The options that allow you to pass in templates from the outside
            </summary>
        </member>
        <member name="T:AntDesign.CloseEventArgs`1">
            <summary>
            Can be used to conditionally block closing events
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AntDesign.CloseEventArgs`1.Cancel">
            <summary>
            If true, the component will be prevented from closing
            </summary>
        </member>
        <member name="T:AntDesign.Color">
            <summary>
            Ant Design Color: https://ant.design/docs/spec/colors
            </summary>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.None">
            <summary>
            不自动调整
            do not auto adjust
            </summary>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.InView">
            <summary>
            在可视范围内（默认模式）
            The default, the viewport boundaries are the boundaries that are used for calculation if overlay 
            is fully visible.
            Attempt to fit the overlay so it is always fully visible in the viewport.
            So if the overlay is outside of the viewport ("overflows"), then reposition calculation is going 
            to be attempted.
            </summary>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.InScroll">
            <summary>
            在滚动范围内
            The document boundaries are the boundaries used for calculation if overlay needs to be reposition. 
            So even if the overlay is outside of the viewport, the overlay may still be shown as long as it 
            does not "overflow" the document boundaries.
            </summary>
        </member>
        <member name="M:AntDesign.Core.Extensions.ArrayExtensions.Scroll``1(``0[],System.Int32)">
            <summary>
            scroll left the elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCode`1">
            <summary>
            Provides a hash comparison of two parameter values
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCode`1.HashCodeEquals(`0,`0)">
            <summary>
            Calculate whether the hash of two parameter values is equal
            </summary>
            <param name="parameter1">Parameter 1</param>
            <param name="parameter2">Parameter 2</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCode`1.GetHashCode(`0)">
            <summary>
            Calculate the hash value of the parameter
            </summary>
            <param name="parameter">Parameter</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeExtensions">
            <summary>
            Provide HashCode calculation of component parameters and other functions
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeExtensions.GetParametersHashCode``1(``0)">
            <summary>
            Compute the HashCode for all parameters
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="component">Component</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider">
            <summary>
            HashCode provider
            <para>It is used to calculate the parameter value of HashCode</para>
            <para>The collection type computes the HashCode for each element,
            and the other types simply return the value raised by the default GetHashCode method of the object
            </para>
            <para>For the consideration of reflection performance, the complex model will not disassemble and calculate the HashCode of its attributes, so it is suggested that the model rewrite the GetHashCode method by itself</para>
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.GetHashCode(System.Object)">
            <summary>
            Gets the hash value of the parameter value
            </summary>
            <param name="parameter">Parameter type</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.Create(System.Type)">
            <summary>
            Create the appropriate hash provider for the parameter
            </summary>
            <param name="parameterType">Parameter type</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.EnumerableHashCodeProvider">
            <summary>
            The hash provider for the IEnumerable type
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.DictionaryHashCodeProvider">
            <summary>
            The hash providers for dictionary types
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.OtherHashCodeProvider">
            <summary>
            The hash providers for other types
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.ParameterDescriptor`1">
            <summary>
            Represents a parameter descriptor for a component
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="F:AntDesign.Core.HashCodes.ParameterDescriptor`1.Descriptors">
            <summary>
            Gets a description of all the parameters of the component
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            A parameter descriptor for a component
            </summary>
            <param name="property">属性类型</param>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.IsEventCallBack(System.Reflection.PropertyInfo)">
            <summary>
            Check whether it is of type EventCallback
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.CreateGetFunc(System.Reflection.PropertyInfo)">
            <summary>
            Create the get delegate for the property
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.GetValueHashCode(`0)">
            <summary>
            Returns the hash of the parameter value
            </summary>
            <param name="component">组件</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.Formatter`1.ParseSpanTimeFormatString(System.String)">
            <summary>
            parse other characters in format string.
            </summary>
            <remarks>refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings#other-characters</remarks>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.Formatter.ToPercentWithoutBlank(System.Double)">
            <summary>
            under WASM mode, when format a double number to percentage, there will be a blank between number and %, '35.00 %'
            use this method instead to avoid the blank space
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``2(``0,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``1(System.Object,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet(System.Object,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``2(``0,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``1(System.Object,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault(System.Object,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet(System.Object,System.String,System.Object)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``2(``0,System.String,``1)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
            <typeparam name="TITem"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``1(System.Object,System.String,``0)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get a get value delegate, the type of the delegate depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Func&lt;TItem, TValue&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;object, TValue&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;object, object&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;TItem, TValue?&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Func&lt;object, TValue?&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Func&lt;object, object?&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = true.<br/>
            </summary>
            <param name="itemType">Type of access object</param>
            <param name="path">String path</param>
            <param name="paramType">If you want to pass in the item as an object, set it to true</param>
            <param name="valueType">If you want to get the value as an object, set it to true</param>
            <param name="checkNull">If true, the delegate will check the path is not null and return value or default value, if the type of return value is ValueType, the delegate will return Nullable&lt;T&gt;,
            if false, the delegate will not check the path not null, so that if the path contains null value or key not found, it will throw exception</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get a get value lambda expression, the type of the lambda expression depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Expression&lt;Func&lt;TItem, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;object, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;object, object&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;TItem, TValue?&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Expression&lt;Func&lt;object, TValue?&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Expression&lt;Func&lt;object, object?&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = true.<br/>
            </summary>
            <param name="itemType">Type of access object</param>
            <param name="path">String path</param>
            <param name="paramType">If you want to pass in the item as an object, set it to true</param>
            <param name="valueType">If you want to get the value as an object, set it to true</param>
            <param name="checkNull">If true, the delegate will check the path is not null and return value or default value, if the type of return value is ValueType, the delegate will return Nullable&lt;T&gt;,
            if false, the delegate will not check the path not null, so that if the path contains null value or key not found, it will throw exception</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetExpression(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get the get value expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <param name="paramType"></param>
            <param name="valueType"></param>
            <param name="checkNull"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get a set value delegate, the type of the delegate depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Action&lt;TItem, TValue&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Action&lt;object, TValue&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Action&lt;object, object&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object).<br/>
            </summary>
            <param name="itemType">Type of item</param>
            <param name="path">Member path string</param>
            <param name="paramType">Type of incoming object</param>
            <param name="valueType">Type of the assignment object</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get a set value lambda expression, the type of the lambda expression depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Expression&lt;Action&lt;TItem, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Expression&lt;Action&lt;object, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Expression&lt;Action&lt;object, object&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object).<br/>
            </summary>
            <param name="itemType">Type of item</param>
            <param name="path">Member path string</param>
            <param name="paramType">Type of incoming object</param>
            <param name="valueType">Type of the assignment object</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetExpression(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get the set value expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <param name="paramType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``2(System.String)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``1(System.String,System.Type)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``2(System.String)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``1(System.String,System.Type)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``2(System.String)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``1(System.String,System.Type)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault(System.String,System.Type)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``2(System.String)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``1(System.String,System.Type)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault(System.String,System.Type)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``2(System.String)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``1(System.String,System.Type)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``2(System.String)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``1(System.String,System.Type)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            C.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetPropertyOrNull(System.Linq.Expressions.Expression,System.String)">
            <summary>
            C?.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ValueTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            V.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValueOrNull(System.Linq.Expressions.Expression)">
            <summary>
            NV?.Value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValue(System.Linq.Expressions.Expression)">
            <summary>
            NV!.Value, maybe InvalidOperationException for no value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetPropOrNull(System.Linq.Expressions.Expression,System.String)">
            <summary>
            NV?.Value.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            NV!.Value.Prop, maybe InvalidOperationException for no value
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsClass(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is class, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsValueType(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is ValueType and not Nullable&lt;T&gt;, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsNullableTypeOrThrow(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is Nullable&lt;T&gt;, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.GetRootParameterExpression(System.Linq.Expressions.Expression)">
            <summary>
            expression should be like: ParameterExpression->MemberExpression1->MemberExpression2... ,
            if the root for 'expression' is not ParameterExpression, this will return null.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.TryConvertToNullable(System.Linq.Expressions.Expression)">
            <summary>
            Try convert Expression type to Nullable type, only Non-Nullable ValueType can be converted
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ParseIndexAccess(System.String)">
            <summary>
            Check if property string has index operation and parse to Expression
            </summary>
            <param name="property"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="F:AntDesign.ComponentStatus.Initing">
            <summary>
            组件初始化中
            Component initialization in progress
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Inited">
            <summary>
            组件初始化完毕
            Component initialization completed
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Opening">
            <summary>
            用于在 parameter 属性中设置，表明组件正在第一次渲染中
            Used to set in the parameter property, Indicates that the component is rendering for the first time
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Opened">
            <summary>
            一旦打开时经历过一次 OnAfterRender/OnAfterRenderAsync，就变成此状态
            Once the component has experienced OnAfterRender/OnAfterRenderAsync once when it is opened, it becomes this state
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Closing">
            <summary>
            用于在 parameter 属性中设置，表明组件正在关闭中
            Used to set in the parameter property, indicating that the component is closing
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Closed">
            <summary>
            一旦关闭时经历过一次 OnAfterRender/OnAfterRenderAsync，就变成此状态
            Once OnAfterRender/OnAfterRenderAsync is experienced once when closing, it becomes this state
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Destroying">
            <summary>
            用于在 parameter 属性中设置，表明组件正则销毁中、
            Used to set in the parameter attribute, indicating that the component is in regular destruction
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Destroyed">
            <summary>
            一旦销毁时经历过一次 OnAfterRender，就变成此状态
            Once OnAfterRender/OnAfterRenderAsync is experienced once during destruction, it becomes this state
            </summary>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.Is(AntDesign.ComponentStatus,AntDesign.ComponentStatus)">
            <summary>
            return <paramref name="componentStatus"/> is <paramref name="status"/>
            </summary>
            <param name="componentStatus"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsOpen(AntDesign.ComponentStatus)">
            <summary>
            Is ComponentStatus.Opening or ComponentStatus.Opened
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsNotOpen(AntDesign.ComponentStatus)">
            <summary>
            Is not ComponentStatus.Opening and is not ComponentStatus.Opened
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsClose(AntDesign.ComponentStatus)">
            <summary>
            Is ComponentStatus.Closing or ComponentStatus.Closed
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.EventUtil">
            <summary>
            avoid component re-rendering caused by events to Blazor components.(pure event handlers)
            <para>
                author: SteveSandersonMS, from <see href="https://gist.github.com/SteveSandersonMS/8a19d8e992f127bb2d2a315ec6c5a373"/>.
            </para>
            <para>
                issue: <seealso href="https://github.com/dotnet/aspnetcore/issues/18919#issuecomment-735969441"/>.
            </para>
            </summary>
        </member>
        <member name="M:AntDesign.core.Extensions.DataConversionExtensions.Convert``2(``0)">
            <summary>
            Converts the generic type TFrom to the specified TTo type
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="fromValue"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.core.Extensions.HttpClientExtensions.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Text.Encoding)">
            <summary>
            Reads as a binary array and converts to the specified encoding
            </summary>
            <param name="httpContent"></param>
            <param name="dstEncoding">The target encoding</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:AntDesign.core.Extensions.HttpClientExtensions.GetEncoding(System.Net.Http.HttpContent)">
            <summary>
            Get encoding information from <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="httpContent"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.EnumerableExtensions.AddIf``1(System.Collections.Generic.IList{``0},System.Boolean,``0)">
            <summary>
            add item to items when condition is true
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="condition"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackComponent`1">
            <summary>
            Feedback Component
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
        </member>
        <member name="P:AntDesign.FeedbackComponent`1.FeedbackRef">
            <summary>
            The options that allow you to pass in templates from the outside
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackComponent`1.OkCancelRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.CloseFeedbackAsync">
            <summary>
            In order that the user can close the template through the button
            为了用户可以在模板内通过按钮主动关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered, which can be used to cancel closing
            在 OK 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered, which can be used to cancel closing
            在 Cancel 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered, which can be used to cancel closing
            在 OK 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered, which can be used to cancel closing
            在 Cancel 按钮触发时回调，可以用来取消关闭
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackComponent`2">
            <summary>
            Feedback Component
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.FeedbackComponent`2.OkCancelRefWithResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.FeedbackRefBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefBase.AntDesign#IFeedbackRef#ModalTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefBase.OnOpen">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.FeedbackRefBase.OnClose">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.FeedbackRefBase.OpenAsync">
            <summary>
            just open close feedback component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackRefBase.UpdateConfigAsync">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.FeedbackRefBase.CloseAsync">
            <summary>
            just do close feedback component, and will not trigger OkAsync or OkCancel 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackRefWithOkCancelBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnCancel">
            <summary>
            invoke when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnOk">
            <summary>
            invoke when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.FeedbackRefWithOkCancelBase.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackRefWithOkCancelBase.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IFeedbackRef">
            <summary>
            Component reference with open and close method
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.ModalTemplate">
            <summary>
            to get feedback inner component's event 
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.OnOpen">
            <summary>
            on Feedback open
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.OnClose">
            <summary>
            on Feedback close
            </summary>
        </member>
        <member name="M:AntDesign.IFeedbackRef.OpenAsync">
            <summary>
            open the component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IFeedbackRef.UpdateConfigAsync">
            <summary>
            update the component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IFeedbackRef.CloseAsync">
            <summary>
            just do close feedback component, and will not trigger OkAsync or OkCancel 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IOkCancelRef">
            <summary>
            Component reference with Ok and Cancel method
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef.OnCancel">
            <summary>
            invoked when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef.OnOk">
            <summary>
            invoked when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.IOkCancelRef.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
             Trigger Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IOkCancelRef.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
             Trigger Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IOkCancelRef`1">
            <summary>
            Component&lt;&gt; reference with Ok and Cancel method
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.IOkCancelRef`1.OnCancel">
            <summary>
            invoke when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef`1.OnOk">
            <summary>
            invoke when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.IOkCancelRef`1.OkAsync(`0)">
            <summary>
            Trigger Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IOkCancelRef`1.CancelAsync(`0)">
            <summary>
            Trigger Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAtLast">
            <summary>
            When focuses, cursor will move to the last character
            This is default behavior.
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAtFirst">
            <summary>
            When focuses, cursor will move to the first character
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAndSelectAll">
            <summary>
            When focuses, the content will be selected
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAndClear">
            <summary>
            When focuses, content will be cleared
            </summary>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfDecade(System.DateTime)">
            <summary>
            for example,
            when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2030-01-01 00:00:00, it's the start date of next 10 years
                
            when currentDateTime is 2023-01-04 05:34:55 then: 
                the next date shouble be 2030-01-01 00:00:00, it's the start date of next 10 years
                
            when currentDateTime is 2018-01-04 05:34:55 then: 
                the next date shouble be 2020-01-01 00:00:00, it's the start date of next 10 years
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfYear(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2021-01-01 00:00:00, it's the start date of next year
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfQuarter(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2020-04-01 00:00:00, it's the start date of the next quarter in 2020
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfMonth(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2020-02-01 00:00:00 , it's the start date of next month
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfDay(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2021-01-05 00:00:00, it's the start date of next day
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddYearsSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddYears逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddYears by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddMonthsSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddMonths逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddMonths by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddDaysSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddDays逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddDays by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.HtmlRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.HtmlRenderer.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.RerenderStrategy">
            <summary>
            Rerender strategy
            </summary>
        </member>
        <member name="F:AntDesign.RerenderStrategy.Always">
            <summary>
            Always to rerender
            </summary>
        </member>
        <member name="F:AntDesign.RerenderStrategy.ParametersHashCodeChanged">
            <summary>
            Rerender only when any of the component's parameter values are changed
            </summary>
        </member>
        <member name="M:AntDesign.DatePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
        </member>
        <member name="M:AntDesign.DatePicker`1.GetIndexValue(System.Int32)">
            <summary>
            Get value of the picker
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ChangeOnClose">
            <summary>
            Saving the input value after blur
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.IsNullable">
            <summary>
            Stores information if TValue is a nullable type.
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening)
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnClear">
            <summary>
            Called when  clear button clicked.
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Placement">
            <summary>
            The position where the selection box pops up
            </summary>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.GetIndexPickerValue(System.Int32)">
            <summary>
            Get pickerValue by picker index. Note that index refers to a picker panel
            and not to input text. For RangePicker 2 inputs generate 2 panels.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ChangePickerValue(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Changes what date(s) will be visible on the picker.
            </summary>
            <param name="date">New date to be saved.</param>
            <param name="index">Index of the input box, where 0 = inputStart and 1 = inputEnd (only RangePicker)</param>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ChangeValue(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            修改值
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="closeDropdown"></param>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.IsShowTime">
            <summary>
            Used only by DatePickerWithTimePanel
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.DateRender">
            <summary>
            for Calendar.DateFullCellRender、DatePicker.DateRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.MonthCellRender">
            <summary>
            for Calendar.MonthFullCellRender、DatePicker.MonthCellRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.CalendarDateRender">
            <summary>
            for Calendar.DateCellRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.CalendarMonthCellRender">
            <summary>
            for Calendar.MonthCellRender
            </summary>
        </member>
        <member name="M:AntDesign.DayOfWeekHelper.GetDiffForDayOfWeek(System.DayOfWeek)">
            <summary>
                Returns the amount of days that have to be added to the start date to get the correct first day of the week.
            </summary>
            <param name="firstDayOfWeek">First day of the week as defined in the current locale.</param>
            <returns>Diff of days.</returns>
        </member>
        <member name="P:AntDesign.RangePicker`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="M:AntDesign.RangePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Int32)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
            <param name="index">Refers to picker index - 0 for starting date, 1 for ending date</param>
        </member>
        <member name="M:AntDesign.RangePicker`1.OnValueChange(`0)">
            <summary>
            Handle change of values.
            When values are changed, PickerValues should point to those new values
            or current date if no values were passed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.RangePicker`1.GetIndexValue(System.Int32)">
            <summary>
            Get value by picker index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.RangePickerDefaults">
            <summary>
            Evaluates what values should be inserted to PickerValues (the date each
            picker will focus on when first shown).
            </summary>
        </member>
        <member name="P:AntDesign.Divider.Type">
            <summary>
             'horizontal' | 'vertical'
            </summary>
        </member>
        <member name="P:AntDesign.Divider.Orientation">
            <summary>
            'left' | 'right' | 'center'
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOpenEventArgs.Cancel">
            <summary>
            获取或设置一个值，该值指示是否应取消事件。
            返回结果: true 如果应取消事件;否则为 false。
            Gets or sets a value indicating whether the event should be cancelled.
            Return result: true if the event should be cancelled; otherwise false.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Placement">
            <summary>
            "left" | "right" | "top" | "bottom"
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Closable">
            <summary>
            <para>
            是否显示右上角的关闭按钮
            </para>
            <para>
            Whether a close (x) button is visible on top right of the Drawer dialog or not.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.MaskClosable">
            <summary>
            <para>
            点击蒙层是否允许关闭
            </para>
            <para>
            Clicking on the mask (area outside the Drawer) to close the Drawer or not.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Mask">
            <summary>
            <para>
            是否显示蒙层
            </para>
            <para>
            Whether to show mask or not.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.MaskStyle">
            <summary>
            <para>
            蒙层样式
            </para>
            <para>
            Style for Drawer's mask element.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Keyboard">
            <summary>
            <para>
            是否支持键盘 esc 关闭
            </para>
            <para>
            Whether to support keyboard esc off
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Title">
            <summary>
            <para>
            标题
            </para>
            <para>
            The title for Drawer.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Placement">
            <summary>
            <para>
            Drawer 的位置，字符串, "left" | "right" | "top" | "bottom"
            </para>
            <para>
            The placement of the Drawer, option could be left, top, right, bottom
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.BodyStyle">
            <summary>
            <para>
            Drawer body 样式
            </para>
            <para>
            Body style for modal body element. Such as height, padding etc.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.HeaderStyle">
            <summary>
            <para>
            Drawer header 抽屉头
            </para>
            <para>
            Header style for modal header element. Such as height, padding etc.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.WrapClassName">
            <summary>
            <para>
            Drawer对话框外层容器的类名
            </para>
            <para>
            The class name of the container of the Drawer dialog.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Width">
            <summary>
            <para>
            宽度，仅当 <see cref="P:AntDesign.Drawer.Placement"/> 为 "left" 或 "right" 时生效
            </para>
            <para>
            Width of the Drawer dialog, only when placement is 'left' or 'right'.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Height">
            <summary>
            <para>
            高度，仅当 <see cref="P:AntDesign.Drawer.Placement"/> 为 "top" 或 "bottom" 时生效
            </para>
            <para>
            Height of the Drawer dialog, only when placement is 'top' or 'bottom'.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.ZIndex">
            <summary>
            <para>
            设置 Drawer 的 z-index
            </para>
            <para>
            The z-index of the Drawer.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OffsetX">
            <summary>
            <para>
            X 轴方向的偏移量，只在方向为 'left'或'right' 时生效.
            </para>
            <para>
            The the X coordinate offset(px), only when placement is 'left' or 'right'.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OffsetY">
            <summary>
            <para>
            Y 轴方向的偏移量，只在方向为 'top'或'bottom' 时生效
            </para>
            <para>
            The the Y coordinate offset(px), only when placement is 'top' or 'bottom'.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Visible">
            <summary>
            <para>
            Drawer 是否可见
            </para>
            <para>
            Whether the Drawer dialog is visible or not.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.VisibleChanged">
            <summary>
            EventCallback trigger on Visible was changed.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OnOpen">
            <summary>
            <para>
            在 Drawer 打开前的回调事件
            </para>
            <para>
            Specify a callback that will be called before drawer displayed
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OnClose">
            <summary>
            <para>
            在 关闭 前的回调事件，应当在 OnClose 将 <see cref="P:AntDesign.Drawer.Visible"/> 设置为false
            </para>
            <para>
            Specify a callback that will be called when a user clicks mask, close button or Cancel button.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OffsetTransform">
            <summary>
            设置 Drawer 是否显示，以及显示时候的位置 Offset
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Transform">
            <summary>
            设置 Drawer 是否隐藏，以及隐藏时候的位置 Offset
            </summary>
        </member>
        <member name="M:AntDesign.Drawer.MaskClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            trigger when mask is clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Drawer.CloseClick">
            <summary>
            trigger when Closer is clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Drawer.HandleClose(System.Boolean)">
            <summary>
            clean-up after close
            </summary>
            <param name="isChangeByParamater"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnCreate(AntDesign.DrawerRef)">
            <summary>
            Create and Open a drawer
            </summary>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnUpdateEvent(AntDesign.DrawerRef)">
            <summary>
            Update drawer
            </summary>
            <param name="drawerRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnClose(AntDesign.DrawerRef)">
            <summary>
            Close the drawer
            </summary>
        </member>
        <member name="M:AntDesign.DrawerRef.CloseAsync">
            <summary>
            close Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.OpenAsync">
            <summary>
            Open Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.UpdateConfigAsync">
            <summary>
            update Confirm dialog config which Visible=true
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.UpdateConfigAsync(AntDesign.DrawerOptions)">
            <summary>
            update Confirm dialog config with a new ConfirmOptions
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef`1.CloseAsync(`0)">
            <summary>
            关闭抽屉
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateAsync(AntDesign.DrawerOptions)">
            <summary>
            Create and open a simple drawer without result
            </summary>
            <param name="options">drawer options</param>
            <returns>The reference of drawer</returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateAsync``3(AntDesign.DrawerOptions,``1)">
            <summary>
            Create and open a drawer with the template
            </summary>
            <typeparam name="TComponent">The type of DrawerTemplate implement</typeparam>
            <typeparam name="TComponentOptions">The </typeparam>
            <typeparam name="TResult">The type of return value</typeparam>
            <param name="config"></param>
            <param name="options"></param>
            <returns>The reference of drawer</returns>
        </member>
        <member name="M:AntDesign.DrawerService.UpdateAsync(AntDesign.DrawerRef)">
            <summary>
            Update a drawer
            </summary>
            <param name="drawerRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateDialogAsync``3(AntDesign.DrawerOptions,``1)">
            <summary>
            Create and open a drawer
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="config"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dropdown.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handle the trigger click.
            </summary>
            <param name="args">MouseEventArgs</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.DropdownButton.Block">
            <summary>
            Option to fit button width to its parent width
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsRender">
            <summary>
            Fully customizable button.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsClass">
            <summary>
            Allows to set each button's css class either to the same string
            or separately.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsStyle">
            <summary>
            Allows to set each button's style either to the same string
            or separately.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Danger">
            <summary>
            Set the danger status of button
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Ghost">
            <summary>
            Used in situations with complex background, home pages usually.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Icon">
            <summary>
            Icon that will be rendered in the right
            button.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Loading">
            <summary>
            Indicates if loading icon is going to be included.
            If set to true, then dropdown will not be active.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Size">
            <summary>
            Button size.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Type">
            <summary>
            Allows to set each button's type either to the same string
            or separately. Use AntDesign.ButtonType helper class.
            </summary>
        </member>
        <member name="M:AntDesign.DropdownButton.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Force overlay trigger to be attached to wrapping element of
            the right button. Right button has to be wrapped,
            because overlay will be looking for first child
            element of the overlay trigger to calculate the overlay position.
            If the right button was the trigger, then its first child
            would be the icon/ellipsis and the overlay would have been
            rendered too high.
            </summary>
            <param name="firstRender"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Flex.Vertical">
            <summary>
            Is direction of the flex vertical, use flex-direction: column
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Wrap">
            <summary>
            Set whether the element is displayed in a single line or in multiple lines
            reference flex-wrap:https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Justify">
            <summary>
            Sets the alignment of elements in the direction of the main axis
            reference justify-content https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Align">
            <summary>
            Sets the alignment of elements in the direction of the cross axis
            reference align-items https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
            </summary>
        </member>
        <member name="P:AntDesign.Flex.FlexCss">
            <summary>
            flex CSS shorthand properties
            reference flex https://developer.mozilla.org/en-US/docs/Web/CSS/flex
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Gap">
            <summary>
            Sets the gap between grids
            small | middle | large | string | number
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Component">
            <summary>
            Custom element type
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.RequiredMark">
            <summary>
            Change how required/optional field labels are displayed on the form.
            <list type="bullet">
                <item>Required - Will mark required fields</item>
                <item>Optional - Will mark optional fields</item>
                <item>None - Will mark no fields, regardless of required/optional</item>
            </list>
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Name">
            <summary>
            Gets or sets the form handler name. This is required for posting it to a server-side endpoint.
            Or using for get the form instance from <see cref="T:AntDesign.FormProviderFinishEventArgs"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Method">
            <summary>
            Http method used to submit form
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.ValidateOnChange">
            <summary>
            Enable validation when component values change
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Enhance">
            <summary>
            If enabled, form submission is performed without fully reloading the page. This is equivalent to adding data-enhance to the form.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Autocomplete">
            <summary>
            Whether input elements can by default have their values automatically completed by the browser
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelStyle">
            <summary>
            Style that will only be applied to <label></label> element.
            Will not be applied if LabelTemplate is set.
            </summary>
        </member>
        <member name="F:AntDesign.FormRequiredMark.None">
            <summary>
            When set to None, the form will not display any indicators by any fields, regardless of their required status
            </summary>
        </member>
        <member name="F:AntDesign.FormRequiredMark.Required">
            <summary>
            When set to Required, the form will display an indicator next to required fields
            </summary>
        </member>
        <member name="F:AntDesign.FormRequiredMark.Optional">
            <summary>
            When set to Optional, the form will display an indicator next to optional fields
            </summary>
        </member>
        <member name="F:AntDesign.FormValidateMode.Default">
            <summary>
            Blazor's validate mode. Add validateAttributes on model field
            Blazor的验证模式，在model字段上附加验证特性
            </summary>
        </member>
        <member name="F:AntDesign.FormValidateMode.Rules">
            <summary>
            Set rules on FormItem
            在FormItem上设置Rules参数
            </summary>
        </member>
        <member name="F:AntDesign.FormValidateMode.Complex">
            <summary>
            Use both Default mode and Rules mode
            同时使用Default和Rules模式
            </summary>
        </member>
        <member name="P:AntDesign.Row.Align">
            <summary>
            'top' | 'middle' | 'bottom'
            </summary>
        </member>
        <member name="P:AntDesign.Row.Justify">
            <summary>
            'start' | 'end' | 'center' | 'space-around' | 'space-between'
            </summary>
        </member>
        <member name="P:AntDesign.Row.DefaultBreakpoint">
            <summary>
            Used to set gutter during pre-rendering
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Theme">
            <summary>
            'fill' | 'outline' | 'twotone';
            </summary>
        </member>
        <member name="M:AntDesign.InputNumber`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Always return true, if input string is invalid, result = default, if input string is null or empty, result = DefaultValue
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <param name="validationErrorMessage"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Input`1">
            <summary>
            Base class for input type components.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AddOnBefore">
            <summary>
            The label text displayed before (on the left side of) the input field.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AddOnAfter">
            <summary>
            The label text displayed after (on the right side of) the input field.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AllowClear">
            <summary>
            Allow to remove input content with clear icon
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnClear">
            <summary>
            Callback when the content is cleared by clicking the "ClearIcon"
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AutoComplete">
            <summary>
            Controls the autocomplete attribute of the input HTML element.
            Default = true
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Bordered">
            <summary>
            Whether has border style
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.BindOnInput">
            <summary>
            Whether to change value on input
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.DebounceMilliseconds">
            <summary>
            Delays the processing of the KeyUp event until the user has stopped
            typing for a predetermined amount of time. Default is 250 ms.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.DefaultValue">
            <summary>
            The initial input content
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Disabled">
            <summary>
            Whether the input is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.InputElementSuffixClass">
            <summary>
            Css class that will be  added to input element class
            as the last class entry.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.MaxLength">
            <summary>
            Max length
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnBlur">
            <summary>
            Callback when input looses focus
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnChange">
            <summary>
            Callback when the content changes
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnFocus">
            <summary>
            Callback when input receives focus
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnInput">
            <summary>
            Callback when value is inputed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnkeyDown">
            <summary>
            Callback when a key is pressed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnkeyUp">
            <summary>
            Callback when a key is released
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnMouseUp">
            <summary>
            Callback when a mouse button is released
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnPressEnter">
            <summary>
            The callback function that is triggered when Enter key is pressed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Placeholder">
            <summary>
            Provide prompt information that describes the expected value of the input field
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Prefix">
            <summary>
            The prefix icon for the Input.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.ReadOnly">
            <summary>
            When present, it specifies that an input field is read-only.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.StopPropagation">
            <summary>
            Controls onclick and blur event propagation.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Suffix">
            <summary>
            The suffix icon for the Input.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Type">
            <summary>
            The type of input, see: MDN(use `Input.TextArea` instead of type=`textarea`)
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.WrapperStyle">
            <summary>
            Set CSS style of wrapper. Is used when component has visible: Prefix/Suffix
            or has paramter set <seealso cref="P:AntDesign.Input`1.AllowClear"/> or for components: <see cref="T:AntDesign.InputPassword"/>
            and <see cref="T:AntDesign.Search"/>. In these cases, html span elements is used
            to wrap the html input element.
            <seealso cref="P:AntDesign.Input`1.WrapperStyle"/> is used on the span element.
            </summary>
        </member>
        <member name="M:AntDesign.Input`1.Focus(AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus behavior for input component with optional behaviors.
            </summary>
            <param name="behavior">enum: AntDesign.FocusBehavior</param>
            <param name="preventScroll">When true, element receiving focus will not be scrolled to.</param>
        </member>
        <member name="M:AntDesign.Input`1.Blur">
            <summary>
            Removes focus from input element.
            </summary>
        </member>
        <member name="M:AntDesign.Input`1.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Invoked when user add/remove content
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.InputGroup.ChildContent">
            <summary>
            Content wrapped by InputGroup.
            </summary>
        </member>
        <member name="P:AntDesign.InputGroup.Compact">
            <summary>
            Whether use compact style
            </summary>
        </member>
        <member name="P:AntDesign.InputGroup.Size">
            <summary>
            The size of InputGroup specifies the size of the included Input fields. 
            Available: large default small
            </summary>
        </member>
        <member name="P:AntDesign.InputPassword.IconRender">
            <summary>
            Custom icon render
            </summary>
        </member>
        <member name="P:AntDesign.InputPassword.ShowPassword">
            <summary>
             Whether to show password
            </summary>
        </member>
        <member name="P:AntDesign.InputPassword.VisibilityToggle">
            <summary>
            Whether show toggle button
            </summary>
        </member>
        <member name="M:AntDesign.InputPassword.Focus(AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus behavior for InputPassword component with optional behaviors.
            Special behavior required for wasm.
            </summary>
            <param name="behavior">enum: AntDesign.FocusBehavior</param>
            <param name="preventScroll">When true, element receiving focus will not be scrolled to.</param>
        </member>
        <member name="P:AntDesign.Search.ClassicSearchIcon">
            <summary>
            Search input is rendered with suffix search icon, not as a button.
            Will be ignored when EnterButton != false
            </summary>
        </member>
        <member name="P:AntDesign.Search.EnterButton">
            <summary>
            Whether to show an enter button after input. This property conflicts with the AddonAfter property
            </summary>
        </member>
        <member name="P:AntDesign.Search.Loading">
            <summary>
            Search box with loading
            </summary>
        </member>
        <member name="P:AntDesign.Search.OnSearch">
            <summary>
            The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.AutoSize">
            <summary>
            Will adjust (grow or shrink) the `TextArea` according to content.
            Can work in connection with `MaxRows` and `MinRows`.
            Sets resize attribute of the textarea HTML element to: none.
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.DefaultToEmptyString">
            <summary>
            When `false`, value will be set to `null` when content is empty
            or whitespace. When `true`, value will be set to empty string.
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.MaxRows">
            <summary>
            `TextArea` will allow growing, but it will stop when visible
            rows = MaxRows (will not grow further).
            Default value = uint.MaxValue
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.MinRows">
            <summary>
            `TextArea` will allow shrinking, but it will stop when visible
            rows = MinRows (will not shrink further).
            Default value = DEFAULT_MIN_ROWS = 1
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.Rows">
            <summary>
            Sets the height of the TextArea expressed in number of rows.
            Default value is 2.
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.OnResize">
            <summary>
            Callback when the size changes
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.Value">
            <inheritdoc/>
        </member>
        <member name="M:AntDesign.TextArea.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:AntDesign.TextArea._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Trigger">
            <summary>
            When Trigger is null, `OnCollapse` won't be invoked after `Collapsed` was changed.
            </summary>
        </member>
        <member name="P:AntDesign.Mentions.LoadOptions">
            <summary>
            Dynamically load mention options for display when the user types a value after the @ symbol
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.ActiveClass">
            <summary>
            Gets or sets the CSS class name applied to the NavLink when the
            current route matches the NavLink href.
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.Match">
            <summary>
            Gets or sets a value representing the URL matching behavior.
            </summary>
        </member>
        <member name="M:AntDesign.MenuLink.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.MenuLink.OnParametersSet">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:AntDesign.MenuLink.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.MessageService">
            <summary>
            Message Service
            </summary>
        </member>
        <member name="T:AntDesign.ButtonProps">
            <summary>
            button props
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmButtonOptions">
            <summary>
            config the confirm button's properties
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button1Props">
            <summary>
            the leftmost button properties in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button2Props">
            <summary>
            the secondary button properties in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button3Props">
            <summary>
            the third button properties in LTR layout
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmOptions">
            <summary>
            Confirm dialog options
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn1Text">
            <summary>
            OK
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn2Text">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn3Text">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Locale">
            <summary>
            Confirm Locale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.ClassName">
            <summary>
            the class name of the element of ".ant-modal" 
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Content">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Icon">
            <summary>
            Confirm left top icon
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Style">
            <summary>
            .ant-modal element's style
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.AutoFocusButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkType">
            <summary>
            set OK button type for the leftmost button: OK or Yes button
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkText">
            <summary>
            set OK button content for the leftmost button: OK or Yes button, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.CancelText">
            <summary>
            set Cancel button content for the second on the left button: Cancel or NO button, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button1Text">
            <summary>
            the leftmost button in LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button2Text">
            <summary>
            The second button on the left is in the LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button3Text">
            <summary>
            the rightmost button in LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OnCancel">
            <summary>
            for OK-Cancel Confirm dialog, cancel button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OnOk">
            <summary>
            for OK-Cancel Confirm dialog, OK button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkButtonProps">
            <summary>
             OK-Cancel Confirm dialog's OK button props. It is equivalent to Button1Props.
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.CancelButtonProps">
            <summary>
             OK-Cancel Confirm dialog's cancel button props. It is equivalent to Button2Props.
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button1Props">
            <summary>
            the leftmost button in LTR layout 
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button2Props">
            <summary>
            The second button on the left is in the LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button3Props">
            <summary>
            the rightmost button in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkCancel">
            <summary>
            show Cancel button for OK-Cancel Confirm dialog
            </summary>
        </member>
        <member name="M:AntDesign.ConfirmOptions.BuildButtonsDefaultOptions">
            <summary>
            set default options for buttons
            </summary>
        </member>
        <member name="T:AntDesign.DialogOptions">
            <summary>
            dialog options
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnClosed">
            <summary>
            trigger after Dialog is closed
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.BodyStyle">
            <summary>
            ant-modal-body style
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Closable">
            <summary>
            show ant-modal-closer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Draggable">
            <summary>
            Draggable modal
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DragInViewport">
            <summary>
            Drag and drop only within the Viewport
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.CloseIcon">
            <summary>
            closer icon RenderFragment, the default is a "X"
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ConfirmLoading">
            <summary>
            Whether to apply loading visual effect for OK button or not
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Header">
            <summary>
            modal header
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Footer">
            <summary>
            modal footer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.WrapClassName">
            <summary>
            The class name of the container of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ChildContent">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ClassName">
            <summary>
            the class name of the element of ".ant-modal"
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnCancel">
            <summary>
            for OK-Cancel Confirm dialog, cancel button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnOk">
            <summary>
            for OK-Cancel Confirm dialog, OK button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.MaxBodyHeight">
            <summary>
            max modal body content height
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Maximizable">
            <summary>
            show modal maximize button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.MaximizeBtnIcon">
            <summary>
            The icon of the maximize button when the modal is in normal state
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.RestoreBtnIcon">
            <summary>
            The icon of the maximize button when the modal is maximized
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DefaultMaximized">
            <summary>
            Maximize the dialog during component initialization, and it will ignore the Maximizable value.
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Resizable">
            <summary>
            Resizable (Horizontal direction only)
            </summary>
        </member>
        <member name="T:AntDesign.DialogOptionsBase">
            <summary>
            ModalOptions, ConfirmOptions and DialogOptions base class
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultMaximizeIcon">
            <summary>
            default Dialog close icon
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultCloseIcon">
            <summary>
            default Dialog close icon
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultHeader">
            <summary>
            default modal header
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultFooter">
            <summary>
            default modal footer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.PrefixCls">
            <summary>
            class name prefix
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.CancelButtonProps">
            <summary>
            Cancel Button's props
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.CancelText">
            <summary>
            modal default footer cancel text
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Centered">
            <summary>
            whether center display
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.GetContainer">
            <summary>
            get or set the modal parent DOM
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Keyboard">
            <summary>
            Whether support press esc to close
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Mask">
            <summary>
            Whether show mask or not
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.MaskClosable">
            <summary>
            Whether to close the modal dialog when the mask (area outside the modal) is clicked
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.MaskStyle">
            <summary>
            Style for dialog's mask element
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkButtonProps">
            <summary>
            Ok Button's props
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkText">
            <summary>
            Text of the OK button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkType">
            <summary>
            Button type of the OK button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Title">
            <summary>
            The modal dialog's title of String
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.TitleTemplate">
            <summary>
            The modal dialog's title of RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Width">
            <summary>
            Width of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.ZIndex">
            <summary>
            The z-index of the Modal
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Rtl">
            <summary>
            Is RTL
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered
            点击确定按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered
            点击取消按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered
            击确定按钮时调用，可以重写它来放入自己的逻辑
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IModalTemplate.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered
            点击取消按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="P:AntDesign.ModalClosingEventArgs.Cancel">
            <summary>
            获取或设置一个值，该值指示是否应取消事件。
            返回结果: true 如果应取消事件;否则为 false。
            Gets or sets a value indicating whether the event should be cancelled.
            Return result: true if the event should be cancelled; otherwise false.
            </summary>
        </member>
        <member name="M:AntDesign.ModalClosingEventArgs.Reject">
            <summary>
            Reject to close 
            </summary>
        </member>
        <member name="T:AntDesign.ModalOptions">
            <summary>
            The options of Modal dialog box
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.AfterClose">
            <summary>
            trigger after Dialog is closed
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Style">
            <summary>
            ant-modal style
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.BodyStyle">
            <summary>
            ant-modal-body style
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Closable">
            <summary>
            show ant-modal-closer 
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Draggable">
            <summary>
            Draggable modal
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.DragInViewport">
            <summary>
            Drag and drop only within the Viewport
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.CloseIcon">
            <summary>
            closer icon RenderFragment, the default is a "X"
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.ConfirmLoading">
            <summary>
            Whether to apply loading visual effect for OK button or not
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.DestroyOnClose">
            <summary>
            Whether to remove Modal from DOM after the Modal closed
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Footer">
            <summary>
            Modal footer. If Footer==null, the dialog will not have a footer
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.WrapClassName">
            <summary>
            The class name of the container of the modal dialog	
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.OnCancel">
            <summary>
            Specify a function that will be called when a user clicks mask, close button on top right or Cancel button.
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.OnOk">
            <summary>
            Specify a function that will be called when a user clicks the OK button
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Content">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Maximizable">
            <summary>
            show modal maximize button
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.MaximizeBtnIcon">
            <summary>
            The icon of the maximize button when the modal is in normal state
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.RestoreBtnIcon">
            <summary>
            The icon of the maximize button when the modal is maximized
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.DefaultMaximized">
            <summary>
            Maximize the Modal during component initialization, and it will ignore the Maximizable value.
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Resizable">
            <summary>
            Resizable
            </summary>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnInitialized">
            <summary>
            Registration events
            </summary>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmOpen(AntDesign.ConfirmRef)">
            <summary>
            create and open a Confirm dialog
            </summary>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmUpdate(AntDesign.ConfirmRef)">
            <summary>
            update Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmClose(AntDesign.ConfirmRef)">
            <summary>
            destroy Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmRemove(AntDesign.ConfirmRef)">
            <summary>
            after Confirm dialog remove from DOM, to remove it from _confirmRefs 
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmCloseAll">
            <summary>
            destroy all Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.Dispose(System.Boolean)">
            <summary>
            Unregister events
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AntDesign.Confirm">
            <summary>
            DOT NOT use Confirm Directly,
            please using ModalService or ConfirmService to create a Confirm dialog
            </summary>
        </member>
        <member name="P:AntDesign.Confirm.Config">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.Confirm.ConfirmRef">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.Confirm.OnRemove">
            <summary>
            
            </summary>
        </member>
        <member name="M:AntDesign.Confirm.OnInitializedAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Confirm.OnAfterRenderAsync(System.Boolean)">
            <summary>
            
            </summary>
            <param name="firstRender"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.ConfirmLocale">
            <summary>
            Confirm dialog locale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.OkText">
            <summary>
            OK button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.CancelText">
            <summary>
            Cancel button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.YesText">
            <summary>
            Yes button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.NoText">
            <summary>
            No button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.RetryText">
            <summary>
            Retry button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.AbortText">
            <summary>
            Abort button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.IgnoreText">
            <summary>
            Ignore button text
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmRef">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmRef.Service">
            <summary>
            ModalService
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmRef.Config">
            <summary>
            Confirm dialog options
            </summary>
        </member>
        <member name="M:AntDesign.ConfirmRef.CloseAsync">
            <summary>
            close Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmRef.OpenAsync">
            <summary>
            Open Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync">
            <summary>
            update Confirm dialog config which Visible=true
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync(AntDesign.ConfirmOptions)">
            <summary>
            update Confirm dialog config with a new ConfirmOptions
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.ConfirmRef`1">
            <summary>
            ConfirmRef with return value 
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.ConfirmRef`1.OnCancel">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.ConfirmRef`1.OnOk">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ConfirmRef`1.OkAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ConfirmRef`1.CancelAsync(`0)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.ConfirmService">
            <summary>
            show a simple Confirm dialog like MessageBox of Windows, it's different from ModalService. ModalService can only create OK-Cancel Confirm dialog and return ConfirmRef, but ConfirmService return ConfirmResult
            </summary>
        </member>
        <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon,AntDesign.ConfirmButtonOptions,System.Nullable{AntDesign.ConfirmAutoFocusButton})">
            <summary>
            show a confirm dialog like MessageBox of Windows
            </summary>
            <param name="content">the content of dialog</param>
            <param name="title">the title of dialog</param>
            <param name="confirmButtons">the buttons of dialog</param>
            <param name="confirmIcon">the icon of dialog</param>
            <param name="options">the configuration options for dialog</param>
            <param name="autoFocusButton">the autofocus button</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon)">
            <summary>
            show a confirm dialog like MessageBox of Windows
            </summary>
            <param name="content">the content of dialog</param>
            <param name="title">the title of dialog</param>
            <param name="confirmButtons">the buttons of dialog</param>
            <param name="confirmIcon">the icon of dialog</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.ModalService">
            <summary>
            create and open a Modal dialog
            </summary>
        </member>
        <member name="M:AntDesign.ModalService.Confirm(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog
            </summary>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Info(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with info icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Success(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with success icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Error(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with error icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Warning(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with Warning icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.ConfirmAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.InfoAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with info icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.SuccessAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with success icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.ErrorAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with error icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.WarningAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with warning icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Update(AntDesign.ConfirmRef)">
            <summary>
            update Confirm which Visible=true
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.UpdateConfirmAsync(AntDesign.ConfirmRef)">
            <summary>
            update Confirm which Visible=true
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Destroy(AntDesign.ConfirmRef)">
            <summary>
            close a Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.DestroyConfirmAsync(AntDesign.ConfirmRef)">
            <summary>
            close the Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.DestroyAll">
            <summary>
            close all Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.DestroyAllConfirmAsync">
            <summary>
            close all Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateAsync(AntDesign.ConfirmOptions)">
            <summary>
            Create and open a OK-Cancel Confirm asynchronous
            </summary>
            <param name="config">Options</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateConfirmAsync(AntDesign.ConfirmOptions)">
            <summary>
            Create and open a OK-Cancel Confirm asynchronous
            </summary>
            <param name="config">Options</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateAsync``3(AntDesign.ConfirmOptions,``1)">
            <summary>
            Create and open template Confirm dialog
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="config"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateConfirmAsync``3(AntDesign.ConfirmOptions,``1)">
            <summary>
            Create and open template Confirm dialog
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="config"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.OpenConfirmAsync(AntDesign.ConfirmRef)">
            <summary>
            open the Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CheckConfirmOptionsIsNull(AntDesign.ConfirmOptions)">
            <summary>
            check Confirm options is null
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal``1(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal``2(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">The modal options</param>
            <param name="componentOptions">Set options for template compoennt</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal``3(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template component
            </summary>
            <typeparam name="TComponent">The type of the template component.</typeparam>
            <typeparam name="TComponentOptions">The type of the template component options.</typeparam>
            <typeparam name="TResult">The result returned from the template component.</typeparam>
            <param name="options">The modal options</param>
            <param name="componentOptions">Set options for template compoennt</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync``1(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync``2(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync``3(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="options"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync(AntDesign.ModalRef)">
            <summary>
            create or open a Modal dialog
            </summary>
            <param name="modalRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync``1(AntDesign.ModalRef{``0})">
            <summary>
            create or open a Modal dialog
            </summary>
            <param name="modalRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CloseModalAsync(AntDesign.ModalRef)">
            <summary>
            close modal dialog
            </summary>
            <param name="modalRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.System#IDisposable#Dispose">
            <summary>
            Implement the interface IDisposable
            </summary>
        </member>
        <member name="T:AntDesign.Dialog">
            <summary>
            Dialog only control component show or hide,
            Elements are not removed from the DOM tree
            </summary>
        </member>
        <member name="F:AntDesign.Dialog._element">
            <summary>
            dialog root container
            </summary>
        </member>
        <member name="M:AntDesign.Dialog.GetStyle">
            <summary>
            ant-modal style
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.TryResetModalStyle">
            <summary>
            if Modal is draggable, reset the position style similar with the first show
            </summary>
        </member>
        <member name="M:AntDesign.Dialog.AppendToContainer">
            <summary>
             append To body
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.Dialog._dialogMouseDown">
            <summary>
            check is dialog click
            </summary>
        </member>
        <member name="F:AntDesign.Dialog._sentinelStart">
            <summary>
            TAB keyboard control
            </summary>
        </member>
        <member name="P:AntDesign.Dialog.SentinelStart">
            <summary>
            Tab start control id
            </summary>
        </member>
        <member name="M:AntDesign.Dialog.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Listening for Tab and ESC key events
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnCloserClick">
            <summary>
            closer(X) click event
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnMaxBtnClick">
            <summary>
            closer(X) click event
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.Show">
            <summary>
            show dialog through animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.CleanShowAnimationAsync">
            <summary>
            clear ant-model enter class, which will disable user-select.
            more details see style/mixins/modal-mask.less
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.Hide">
            <summary>
            Hide Dialog through animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.IsShow">
            <summary>
            Determine whether Dialog is displayed
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnParametersSetAsync">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnAfterRenderAsync(System.Boolean)">
             <summary>
            
             </summary>
             <param name="isFirst"></param>
             <returns></returns>
        </member>
        <member name="T:AntDesign.DialogWrapper">
            <summary>
            A component that can exist in the DOM tree for a long time, unless you destroy it on your own initiative
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.Config">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.ChildContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.DestroyOnClose">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.OnBeforeDestroy">
            <summary>
            Before destroy the component from the DOM tree. And you can cancel the destroy by set CancelEventArgs.Cancel = true
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.OnAfterShow">
            <summary>
            trigger when visible is true on OnAfterRenderAsync method
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.OnAfterHide">
            <summary>
            trigger when visible is false on OnAfterRenderAsync method
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.Dialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:AntDesign.DialogWrapper.OnParametersSetAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DialogWrapper.OnAfterRenderAsync(System.Boolean)">
            <summary>
            
            </summary>
            <param name="firstRender"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DialogWrapper.DestroyAsync">
            <summary>
            Destroy the component from the DOM tree
            </summary>
        </member>
        <member name="T:AntDesign.Modal">
            <summary>
            Modal Dialog
            </summary>
        </member>
        <member name="P:AntDesign.Modal.ModalRef">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.Modal.AfterClose">
            <summary>
            Specify a function that will be called when modal is closed
            </summary>
        </member>
        <member name="P:AntDesign.Modal.BodyStyle">
            <summary>
            Body style for modal body element. Such as height, padding etc
            </summary>
        </member>
        <member name="P:AntDesign.Modal.CancelText">
            <summary>
            Text or RenderFragment of the Cancel button, it will override the ModalLocale
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Centered">
            <summary>
            centered
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Closable">
            <summary>
            Whether a close (x) button is visible on top right of the modal dialog or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Draggable">
            <summary>
            Whether the modal dialog box be dragged
            </summary>
        </member>
        <member name="P:AntDesign.Modal.DragInViewport">
            <summary>
            Drag and drop only within the Viewport
            </summary>
        </member>
        <member name="P:AntDesign.Modal.CloseIcon">
            <summary>
            closer icon RenderFragment, the default is a "X"
            </summary>
        </member>
        <member name="P:AntDesign.Modal.ConfirmLoading">
            <summary>
            Whether to apply loading visual effect for OK button or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.DestroyOnClose">
            <summary>
            Whether to unmount child components on onClose, default is false
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Header">
            <summary>
            Header content
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Footer">
            <summary>
            Footer content, set as Footer=null when you don't need default buttons
            </summary>
        </member>
        <member name="P:AntDesign.Modal.GetContainer">
            <summary>
            get or set the modal parent DOM, default is null: which is specifying document.body
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Keyboard">
            <summary>
            Whether support press esc to close
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Mask">
            <summary>
            Whether show mask or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.MaskClosable">
            <summary>
            Whether to close the modal dialog when the mask (area outside the modal) is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Modal.MaskStyle">
            <summary>
            Style for modal's mask element
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OkText">
            <summary>
            Text of RenderFragment of the OK button, it will override the ModalLocale
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OkType">
            <summary>
            Button type of the OK button
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Title">
            <summary>
            The modal dialog's title. If <param>TitleTemplate</param>!= null, <param>Title</param> will not take effect
            </summary>
        </member>
        <member name="P:AntDesign.Modal.TitleTemplate">
            <summary>
            The modal dialog's title
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Visible">
            <summary>
            Whether the modal dialog is visible or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.VisibleChanged">
            <summary>
            Specify a function invoke when the modal dialog is visible or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Width">
            <summary>
            Width of the modal dialog, the default value is 520
            </summary>
        </member>
        <member name="P:AntDesign.Modal.WrapClassName">
            <summary>
            The class name of the container of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.Modal.ZIndex">
            <summary>
            The z-index of the Modal
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OnCancel">
            <summary>
            Specify a function that will be called when a user clicks mask, close button on top right or Cancel button
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OnOk">
            <summary>
            Specify a function that will be called when a user clicks the OK button
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OkButtonProps">
            <summary>
            The OK button props
            </summary>
        </member>
        <member name="P:AntDesign.Modal.CancelButtonProps">
            <summary>
            The Cancel button props
            </summary>
        </member>
        <member name="P:AntDesign.Modal.ChildContent">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.Modal.Rtl">
            <summary>
            Is RTL
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Locale">
            <summary>
            Modal Locale
            </summary>
        </member>
        <member name="P:AntDesign.Modal.MaxBodyHeight">
            <summary>
            max modal content body height
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Maximizable">
            <summary>
            show modal maximize button
            </summary>
        </member>
        <member name="P:AntDesign.Modal.MaximizeBtnIcon">
            <summary>
            The icon of the maximize button when the modal is in normal state
            </summary>
        </member>
        <member name="P:AntDesign.Modal.RestoreBtnIcon">
            <summary>
            The icon of the maximize button when the modal is maximized
            </summary>
        </member>
        <member name="P:AntDesign.Modal.DefaultMaximized">
            <summary>
            Maximize the Modal during component initialization, and it will ignore the Maximizable value.
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Resizable">
            <summary>
            Resizable (Horizontal direction only)
            </summary>
        </member>
        <member name="T:AntDesign.ModalCancelFooter">
            <summary>
            modal footer Component
            </summary>
        </member>
        <member name="P:AntDesign.ModalCancelFooter.ModalProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.ModalFooter">
            <summary>
            modal footer Component
            </summary>
        </member>
        <member name="P:AntDesign.ModalFooter.ModalProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.ModalLocale">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ModalLocale.OkText">
            <summary>
            OK button text
            </summary>
        </member>
        <member name="P:AntDesign.ModalLocale.CancelText">
            <summary>
            Cancel button text
            </summary>
        </member>
        <member name="T:AntDesign.ModalOkFooter">
            <summary>
            modal footer Component
            </summary>
        </member>
        <member name="P:AntDesign.ModalOkFooter.ModalProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.ModalRef">
            <summary>
            The reference of the modal instance
            </summary>
        </member>
        <member name="M:AntDesign.ModalRef.OpenAsync">
            <summary>
            open the Modal dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalRef.CloseAsync">
            <summary>
            close the Modal dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalRef.UpdateConfigAsync">
            <summary>
            Update modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalRef.SetConfirmLoading(System.Boolean)">
            <summary>
            Set the loading state of the confirm button
            </summary>
            <param name="loading"></param>
        </member>
        <member name="T:AntDesign.ModalRef`1">
            <summary>
            ModalRef with return value
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.ModalRef`1.OnCancel">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.ModalRef`1.OnOk">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ModalRef`1.OkAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ModalRef`1.CancelAsync(`0)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.ConfirmButtons">
            <summary>
            Confirm footer buttons type
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.OK">
            <summary>
            Only a OK button
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.OKCancel">
            <summary>
            two buttons: OK and a Cancel
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.YesNo">
            <summary>
            two buttons: Yes and No 
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.RetryCancel">
            <summary>
            two buttons: Retry and Cancel
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.AbortRetryIgnore">
            <summary>
            three buttons: Abort, Retry and Ignore
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.YesNoCancel">
            <summary>
            three buttons: Yes, No and Cancel
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmIcon">
            <summary>
            Confirm icon type
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmResult">
            <summary>
            which the confirm button is clicked
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.AnimationClass">
            <summary>
            控制出现与消失的动画
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Btn">
            <summary>
            自定义关闭按钮
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.ClassName">
            <summary>
            自定义 CSS class
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.CloseIcon">
            <summary>
            自定义关闭图标
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Message">
            <summary>
            通知提醒标题，必选，string 或者 RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Description">
            <summary>
            通知提醒内容，必选，string 或者 RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Duration">
            <summary>
            自动关闭的延时，单位为秒。默认 4.5 秒后自动关闭，配置为 null 则不自动关闭
             </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Icon">
            <summary>
            自定义图标	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Key">
            <summary>
            当前通知唯一标志		
            </summary>
        </member>
        <member name="E:AntDesign.NotificationConfig.OnClose">
            <summary>
            当通知关闭时触发	
            </summary>
        </member>
        <member name="E:AntDesign.NotificationConfig.OnClick">
            <summary>
            点击通知时触发的回调函数	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Style">
            <summary>
            自定义内联样式	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Placement">
            <summary>
            弹出位置
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.NotificationType">
            <summary>
            通知提醒框左侧的图标类型
            </summary>
        </member>
        <member name="T:AntDesign.NotificationGlobalConfig">
            <summary>
            AntNotification全局配置
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Bottom">
            <summary>
            消息从底部弹出时，距离底部的位置，单位像素。
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Top">
            <summary>
            消息从顶部弹出时，距离顶部的位置，单位像素。	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Rtl">
            <summary>
            是否开启 RTL 模式	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.CloseIcon">
            <summary>
            自定义关闭图标
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Duration">
            <summary>
            自动关闭的延时，单位为秒。默认 4.5 秒后自动关闭，配置为 null 则不自动关闭
             </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Placement">
            <summary>
            弹出位置
            </summary>
        </member>
        <member name="M:AntDesign.Notification.Config(AntDesign.NotificationGlobalConfig)">
            <summary>
            modify global config
            </summary>
            <param name="defaultConfig"></param>
        </member>
        <member name="T:AntDesign.NotificationBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.NotificationRef">
            <summary>
            NotificationRef
            </summary>
        </member>
        <member name="P:AntDesign.NotificationRef.Config">
            <summary>
            the notification box's config
            </summary>
        </member>
        <member name="M:AntDesign.NotificationRef.OpenAsync">
            <summary>
            open the notification box
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.UpdateConfigAsync">
            <summary>
            After modifying the Config property, update the notification box
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
            <summary>
            update the notification box's description
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
            <summary>
            update the notification box's description and message
            </summary>
            <param name="description"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.CloseAsync">
            <summary>
            close the notification box
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.NotificationService">
            <summary>
            AntNotification Service
            </summary>
        </member>
        <member name="M:AntDesign.NotificationService.CreateRefAsync(AntDesign.NotificationConfig)">
            <summary>
            just create a NotificationRef without open it
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationService.UpdateAsync(System.String,OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},System.Nullable{OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment}})">
            <summary>
            update a existed notification box
            </summary>
            <param name="key"></param>
            <param name="description"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationService.Open(AntDesign.NotificationConfig)">
            <summary>
            Open a notification box
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Success(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Success style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Error(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Error style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Info(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Info style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Warning(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Warning style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Warn(AntDesign.NotificationConfig)">
            <summary>
            Equivalent to Warning method
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Close(System.String)">
            <summary>
            close notification by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationService.Destroy">
            <summary>
            destroy all Notification box
            </summary>
        </member>
        <member name="M:AntDesign.Pagination.GetItemIcon(Microsoft.AspNetCore.Components.RenderFragment{AntDesign.PaginationItemRenderContext},System.String)">
            <summary>
            computed icon node that need to be rendered.
            </summary>
            <param name="icon"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Progress.Size">
            <summary>
            progress size
            </summary>
        </member>
        <member name="P:AntDesign.Progress.Type">
            <summary>
            to set the type, options: line circle dashboard
            </summary>
        </member>
        <member name="P:AntDesign.Progress.Format">
            <summary>
            template function of the content
            </summary>
        </member>
        <member name="P:AntDesign.Progress.Percent">
            <summary>
            to set the completion percentage
            </summary>
        </member>
        <member name="P:AntDesign.Progress.ShowInfo">
            <summary>
            whether to display the progress value and the status icon
            </summary>
        </member>
        <member name="P:AntDesign.Progress.Status">
            <summary>
            to set the status of the Progress, options: success exception normal active(line only)
            </summary>
        </member>
        <member name="P:AntDesign.Progress.StrokeLinecap">
            <summary>
            to set the style of the progress linecap
            </summary>
        </member>
        <member name="P:AntDesign.Progress.SuccessPercent">
            <summary>
            segmented success percent
            </summary>
        </member>
        <member name="P:AntDesign.Progress.TrailColor">
            <summary>
            color of unfilled part
            </summary>
        </member>
        <member name="P:AntDesign.Progress.StrokeWidth">
            <summary>
            to set the width of the progress bar, unit: px
            to set the width of the circular progress, unit: percentage of the canvas width
            to set the width of the dashboard progress, unit: percentage of the canvas width
            </summary>
        </member>
        <member name="P:AntDesign.Progress.StrokeColor">
            <summary>
            color of progress bar, render linear-gradient when passing an object
            color of circular progress, render linear-gradient when passing an object
            </summary>
        </member>
        <member name="P:AntDesign.Progress.Steps">
            <summary>
            the total step count
            </summary>
        </member>
        <member name="P:AntDesign.Progress.Width">
            <summary>
            to set the canvas width of the circular progress, unit: px
            to set the canvas width of the dashboard progress, unit: px
            </summary>
        </member>
        <member name="P:AntDesign.Progress.GapDegree">
            <summary>
            the gap degree of half circle, 0 ~ 295
            </summary>
        </member>
        <member name="P:AntDesign.Progress.GapPosition">
            <summary>
            the gap position, options: top bottom left right
            </summary>
        </member>
        <member name="P:AntDesign.Rate.AllowClear">
            <summary>
            是否允许再次点击后清除
            </summary>
        </member>
        <member name="P:AntDesign.Rate.AllowHalf">
            <summary>
            是否允许半选
            </summary>
        </member>
        <member name="P:AntDesign.Rate.Disabled">
            <summary>
            是否禁止用户交互
            </summary>
        </member>
        <member name="P:AntDesign.Rate.AutoFocus">
            <summary>
            是否可获得输入焦点
            </summary>
        </member>
        <member name="P:AntDesign.Rate.Character">
            <summary>
            自定义字符,星星可以被自定义字符替代
            </summary>
        </member>
        <member name="P:AntDesign.Rate.Count">
            <summary>
            组件要呈现的星星数目
            </summary>
        </member>
        <member name="P:AntDesign.Rate.Value">
            <summary>
            当前值--被选中的星星数量
            </summary>
        </member>
        <member name="P:AntDesign.Rate.DefaultValue">
            <summary>
            默认当前被选中的星星数量,如果被设置为小数位不为0的，则组件默认含有半星并且允许半星
            </summary>
        </member>
        <member name="P:AntDesign.Rate.Tooltips">
            <summary>
            自定义每项的提示信息（存储每个子元素的提醒框内容文本）
            </summary>
        </member>
        <member name="F:AntDesign.Rate._hasHalf">
            <summary>
            是否允许半选
            Whether to allow half-selection
            </summary>
        </member>
        <member name="F:AntDesign.Rate._hoverValue">
            <summary>
            鼠标悬停时从最左到光标位置的星星数。
            The number of stars from the far left to the cursor position when the hovered with mouse.
            </summary>
        </member>
        <member name="F:AntDesign.Rate._currentValue">
            <summary>
            当前被选中的星星数量
            Number of stars currently selected
            </summary>
        </member>
        <member name="F:AntDesign.Rate._isFocused">
            <summary>
            是否获取的输入焦点
            Wheter to get input focus.
            </summary>
        </member>
        <member name="F:AntDesign.Rate._valueWasSet">
            <summary>
            Indicates if Value has been changed. Needed to avoid reseting to DefaultValue if exists.
            </summary>
        </member>
        <member name="P:AntDesign.RateItemRenderContext.Type">
            <summary>
             'AntIcon' | 'Text'
            </summary>
        </member>
        <member name="P:AntDesign.Result.Status">
            <summary>
            success | error | info | warning | 404 | 403 | 500
            default: info
            </summary>
        </member>
        <member name="P:AntDesign.Result.IsShowIcon">
            <summary>
            是否显示图标，默认显示
            </summary>
        </member>
        <member name="P:AntDesign.Select.LabelTemplateItem`2.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            </summary>
        </member>
        <member name="M:AntDesign.Select.Internal.SelectContent`2.GetFirstItemMaxWidth">
            <summary>
            Any item may overflow. In case of first item, when there
            are any other elements inside SelectContent (prefix, suffix, clear btn, etc)
            default MaxWidth will force th SelectContent to grow. Changing the MaxWidth
            allows the overflowing item to fit in a single line.
            TODO: use relative units
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.Select.Internal.SelectContent`2._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="T:AntDesign.Select.Internal.SelectOptionItem`2">
            <summary>
            The data model for a SelectOption that is used internally.
            </summary>
            <typeparam name="TItemValue"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:AntDesign.Select.Internal.SelectOptionItem`2.SelectedTagRef">
            <summary>
            ElementRef that will be used by <see cref="T:AntDesign.Select.Internal.SelectContent`2"/> only
            for selected Mode=Multiple and MaxTagCount=Responsive
            </summary>
        </member>
        <member name="P:AntDesign.Select.Internal.SelectSuffixIcon`2.ShowSearchIcon">
            <summary>
            Whether show search input in single mode.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.Bordered">
            <summary>
            Toggle the border style.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.EnableVirtualization">
            <summary>
            Whether to enable virtualization feature or not, only works for .NET 5 and higher
            </summary>
        </member>
        <member name="F:AntDesign.Select`2._dataSourceItemShallowCopyMehtod">
            <summary>
            MethodInfo will contain attached MemberwiseClone protected
            method. Due to its protection level, it has to be accessed
            using reflection. It will be used during generation of
            the DataSource shallow copy (which is a new list of DataSource
            items with shallow copy of each item).
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DataSource">
            <summary>
            The datasource for this component.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DataSourceEqualityComparer">
            <summary>
            EqualityComparer that will be used during DataSource change
            detection. If no comparer set, default .Net is going to be
            used.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DefaultActiveFirstOption">
            <summary>
            Activates the first item that is not deactivated.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DisabledName">
            <summary>
            The name of the property to be used as a disabled indicator.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DropdownMatchSelectWidth">
            <summary>
            Will match drowdown width:
            - for boolean: true - with widest item in the dropdown list
            - for string: with value (e.g.: "256px")
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DropdownMaxWidth">
            <summary>
            Will not allow dropdown width to grow above stated in here value (eg. "768px")
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DropdownRender">
            <summary>
            Customize dropdown content. The context is the original content.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.GroupName">
            <summary>
            The name of the property to be used as a group indicator.
            If the value is set, the entries are displayed in groups.
            Use additional SortByGroup and SortByLabel.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.IgnoreItemChanges">
            <summary>
            Is used to increase the speed. If you expect changes to the label name,
            group name or disabled indicator, disable this property.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ItemTemplate">
            <summary>
            Is used to customize the item style.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.LabelTemplate">
            <summary>
            Is used to customize the label style.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.MaxTagPlaceholder">
            <summary>
            Placeholder for hidden tags. If used with ResponsiveTag.Responsive, implement your own handling logic.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.NotFoundContent">
            <summary>
            Specify content to show when no result matches.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnBlur">
            <summary>
            Called when blur.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnCreateCustomTag">
            <summary>
            Called when custom tag is created.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnDataSourceChanged">
            <summary>
            Called when the datasource changes. From null to <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            from <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            or from <see cref="T:System.Collections.Generic.IEnumerable`1"/> to null.
            It does not trigger if a value inside the <see cref="T:System.Collections.Generic.IEnumerable`1"/> changes.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnDropdownVisibleChange">
            <summary>
            Called when the dropdown visibility changes.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnMouseEnter">
            <summary>
            Called when mouse enter.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnMouseLeave">
            <summary>
            Called when mouse leave.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnSearch">
            <summary>
            Callback function that is fired when input changed.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.PopupContainerSelector">
            <summary>
            Use this to fix overlay problems e.g. #area
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ShowArrowIcon">
            <summary>
            Whether to show the drop-down arrow
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ShowSearchIcon">
            <summary>
            Whether show search input in single mode.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.TokenSeparators">
            <summary>
            Define what characters will be treated as token separators for newly created tags.
            Useful when creating new tags using only keyboard.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ValueChanged">
            <summary>
            Used for the two-way binding.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.Value">
            <summary>
            Get or set the selected value.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.LabelProperty">
            <summary>
            Specifies the label property in the option object. If use this property, should not use <see cref="!:LabelName"/>
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ValueProperty">
            <summary>
            Specifies the value property in the option object. If use this property, should not use <see cref="!:ValueName"/>
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DisabledPredicate">
            <summary>
            Specifies predicate for disabled options
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DefaultValue">
            <summary>
            Used when Mode =  default - The value is used during initialization and when pressing the Reset button within Forms.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.IsGroupingEnabled">
            <summary>
            Indicates if the GroupName is used. When this value is True, the SelectOptions will be rendered in group mode.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.ProcessSelectedSelectOptions">
            <summary>
            Used only when ChildElement SelectOptions is used.
            Will run this process if after initalization an item
            is added that is also marked as selected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Select`2.CreateDeleteSelectOptions">
            <summary>
            Create or delete SelectOption when the datasource changed
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetClassMap">
            <summary>
            Sets the CSS classes to change the visual style
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.AllOptionsHidden">
            <summary>
            Returns True if the parameter IsHidden is set to true for all entries in the SelectOptions list
            </summary>
            <returns>true if all items are set to IsHidden(true)</returns>
        </member>
        <member name="M:AntDesign.Select`2.SetDropdownStyleAsync">
            <summary>
            Gets the BoundingClientRect of Ref (JSInvoke) and set the min-width and width in px.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.ElementScrollIntoViewAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Scrolls to the item via JavaScript.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Select`2.ResetValue">
            <summary>
            Called by the Form reset method
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetDefaultActiveFirstItemAsync">
            <summary>
            If DefaultActiveFirstItem is True, the first item which is not IsDisabled(True) is set as selected.
            If there is no item it falls back to the clear method.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.TrySetDefaultValueAsync">
            <summary>
            Method invoked by OnAfterRenderAsync if the Value is null(default) and
            DefaultValue has a value or DefaultActiveFirstItem is True.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.TrySetDefaultValuesAsync">
            <summary>
            Method invoked by OnAfterRenderAsync if the Value is null(default) and
            DefaultValues has a values or DefaultActiveFirstItem is True.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetInitialValuesAsync">
            <summary>
            Sets the initial values after initialization, the method should only called once.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.AppendLabelValue(System.String)">
            <summary>
            Append a label item in tag mode
            </summary>
            <param name="label"></param>
        </member>
        <member name="P:AntDesign.Select`2.LastValueBeforeReset">
            <summary>
            When newly set Value is not found in SelectOptionItems, it is reset to
            default. This property holds the value before reset. It may be needed
            to be reaplied (for example when new Value is set at the same time
            as new SelectOption is added, but Value in the component is set
            before new SelectOptionItem has been created).
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.OnValueChange(`0)">
            <summary>
            The Method is called every time if the value of the @bind-Value was changed by the two-way binding.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.EvaluateValueChangedOutsideComponent(AntDesign.Select.Internal.SelectOptionItem{`0,`1},`0)">
            <summary>
            When bind-Value is changed outside of the component, then component
            selected items have to be reselected according to new value passed.
            </summary>
            <param name="optionItem">The option item that has been selected.</param>
            <param name="value">The value of the selected option item.</param>
        </member>
        <member name="M:AntDesign.Select`2.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Method is called via EventCallBack if the value of the Input element was changed by keyboard
            </summary>
            <param name="e">Contains the value of the Input element</param>
        </member>
        <member name="M:AntDesign.Select`2.OnKeyUpAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
        </member>
        <member name="M:AntDesign.Select`2.OnInputFocusAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Method is called via EventCallBack if the Input element get the focus
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.OnKeyDownAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method is called via EventCallback if a key is pressed inside Input element.
            The method is used to get the TAB event if the user press TAB to cycle trough elements.
            If a TAB is received, the overlay will be closed and the Input element blures.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.OnInputBlurAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Method is called via EventCallBack if the Input element loses the focus
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetInputBlurAsync">
            <summary>
            Check if Focused property is true;  Set the Focused property to false, change the
            style and blures the Input element via DOM. It also invoke the OnBlur Action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Select`2.ScrollToFirstSelectedItemAsync">
            <summary>
            Search the first selected item, set IsActive to False for all other items and call the scrollIntoView function via JavaScript.
            The method is used to scroll to the first selected item after opening the overlay.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.OnRemoveSelectedAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
            <summary>
            Method is called via EventCallBack if the user clicked on the Close icon of a Tag.
            </summary>
        </member>
        <member name="F:AntDesign.SelectBase`2._maxTagCount">
            <summary>
                How long (number of characters) a tag will be.
                Only for Mode = "multiple" or Mode = "tags"
            </summary>
            <value>
                The maximum length of the tag text.
            </value>
        </member>
        <member name="P:AntDesign.SelectBase`2.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening)
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.AllowClear">
            <summary>
            Show clear button. Has no effect if <see cref="P:AntDesign.AntInputComponentBase`1.Value"/> type default
            is also in the list of <see cref="T:AntDesign.SelectOption`2"/>,
            unless used with <see cref="P:AntDesign.SelectBase`2.ValueOnClear"/>.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.AutoClearSearchValue">
            <summary>
            Whether the current search will be cleared on selecting an item.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Disabled">
            <summary>
            Whether the Select component is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Mode">
            <summary>
            Set mode of Select - default | multiple | tags
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.EnableSearch">
            <summary>
            Indicates whether the search function is active or not. Always true for mode tags.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SearchDebounceMilliseconds">
            <summary>
            Delays the processing of the search input event until the user has stopped
            typing for a predetermined amount of time. Default to 250ms.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Loading">
            <summary>
            Show loading indicator. You have to write the loading logic on your own.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Open">
            <summary>
            Controlled open state of dropdown.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Placeholder">
            <summary>
            Placeholder of select.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnFocus">
            <summary>
            Called when focus.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SortByGroup">
            <summary>
            The name of the property to be used as a group indicator.
            If the value is set, the entries are displayed in groups.
            Use additional SortByGroup and SortByLabel.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SortByLabel">
            <summary>
            Sort items by label value. None | Ascending | Descending
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.HideSelected">
            <summary>
            Hides the selected items when they are selected.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValueChanged">
            <summary>
            Used for the two-way binding.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValuesChanged">
            <summary>
            Used for the two-way binding.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SuffixIcon">
            <summary>
            The custom suffix icon.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.PrefixIcon">
            <summary>
            The custom prefix icon.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.AccessKey">
            <summary>
            The accesskey global attribute.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.DefaultValues">
            <summary>
            Used when Mode =  multiple | tags - The values are used during initialization and when pressing the Reset button within Forms.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnClearSelected">
            <summary>
            Called when the user clears the selection.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnSelectedItemChanged">
            <summary>
            Called when the selected item changes.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnSelectedItemsChanged">
            <summary>
            Called when the selected items changes.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ActiveOption">
            <summary>
                Currently active (highlighted) option.
                It does not have to be equal to selected option.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Values">
            <summary>
            Get or set the selected values.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.CustomTagLabelToValue">
            <summary>
                Converts custom tag (a string) to TItemValue type.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.HasValue">
            <summary>
                Determines if SelectOptions has any selected items
            </summary>
            <returns>true if SelectOptions has any selected Items, otherwise false</returns>
        </member>
        <member name="P:AntDesign.SelectBase`2.IsSearchEnabled">
            <summary>
                Returns whether the user can input a pattern to search matched items
            </summary>
            <returns>true if search is enabled</returns>
        </member>
        <member name="P:AntDesign.SelectBase`2.SortedSelectOptionItems">
            <summary>
                Sorted list of SelectOptionItems
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SelectOptions">
            <summary>
            Used for rendering select options manually.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.MaxTagTextLength">
            <summary>
            How long (number of characters) a tag will be.
            Only for Mode = "multiple" or Mode = "tags"
            </summary>
            <value>
            The maximum length of the tag text.
            </value>
        </member>
        <member name="P:AntDesign.SelectBase`2.LabelInValue">
            <summary>
            Whether to embed label in value, turn the format of value from TItemValue to string (JSON)
            e.g. { "value": TItemValue, "label": "Label value" }
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.MaxTagCount">
            <summary>
                Max tag count to show. responsive will cost render performance.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValueOnClear">
            <summary>
            When Clear button is pressed, Value will be set to
            whatever is set in ValueOnClear
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ItemLabel">
            <summary>
            Specifies the label property in the option object. If use this property, should not use <see cref="P:AntDesign.SelectBase`2.LabelName"/>
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ItemValue">
            <summary>
            Specifies the value property in the option object. If use this property, should not use <see cref="P:AntDesign.SelectBase`2.ValueName"/>
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.LabelName">
            <summary>
            The name of the property to be used for the label.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValueName">
            <summary>
            The name of the property to be used for the value.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.OnValuesChangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                The Method is called every time if the value of the @bind-Values was changed by the two-way binding.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.EvaluateValuesChangedOutsideComponent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                When bind-Values is changed outside of the component, then component
                selected items have to be reselected according to new values passed.
                TODO: (Perf) Consider using hash to identify if the passed values are different from currently selected.
            </summary>
            <param name="values">The values that need to be selected.</param>
        </member>
        <member name="M:AntDesign.SelectBase`2.CreateSelectOptionItem(System.String,System.Boolean)">
            <summary>
                Creates the select option item. Mostly meant to create new tags, that is why IsAddedTag is hardcoded to true.
            </summary>
            <param name="label">Creation based on passed label</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.SelectBase`2.InvokeOnSelectedItemChanged(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
            <summary>
                A separate method to invoke ValuesChanged and OnSelectedItemsChanged to reduce code duplicates.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.SetValueAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
            <summary>
                The method is called every time if the user select/de-select a item by mouse or keyboard.
                Don't change the IsSelected property outside of this function.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.OnInputClearClickAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
                Method is called via EventCallBack after the user clicked on the Clear icon inside the Input element.
                Set the IsSelected and IsHidden properties for all items to False. It updates the overlay position if
                the SelectMode is Tags or Multiple. Invoke the OnClearSelected Action. Set the Value(s) to default.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.SetInputFocusAsync">
            <summary>
                Check if Focused property is False; Set the Focused property to true, change the
                style and set the Focus on the Input element via DOM. It also invoke the OnFocus Action.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.UpdateOverlayPositionAsync">
            <summary>
                Inform the Overlay to update the position.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.CloseAsync">
            <summary>
                Close the overlay
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.SelectBase`2.ResetValue">
            <summary>
                Called by the Form reset method
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.ClearSelectedAsync">
            <summary>
                Clears the selectValue(s) property and send the null(default) value back through the two-way binding.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.UnhideSelectOptions">
            <summary>
            Unhide all select options, except any that are selected in the case that <see cref="P:AntDesign.SelectBase`2.HideSelected"/> is true
            </summary>
        </member>
        <member name="P:AntDesign.SelectOption`2.Disabled">
            <summary>
            Disable this option
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="P:AntDesign.SelectOption`2.Label">
            <summary>
            Label of Select after selecting this Option
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="P:AntDesign.SelectOption`2.Value">
            <summary>
            Value of Select after selecting this Option
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="F:AntDesign.SelectOption`2._itemSet">
            <summary>
            Item of the SelectOption
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.Title">
            <summary>
            是否显示标题占位图
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.Avatar">
            <summary>
            是否显示头像占位图
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.Paragraph">
            <summary>
            是否显示段落占位图
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.DefaultValue">
            <summary>
            The default value of slider. When <see cref="P:AntDesign.Slider`1.Range"/> is false, use number, otherwise, use [number, number]
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Disabled">
            <summary>
            If true, the slider will not be interactable
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Dots">
            <summary>
            Whether the thumb can drag over tick only
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Included">
            <summary>
            Make effect when <see cref="P:AntDesign.Slider`1.Marks"/> not null, true means containment and false means coordinative
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Marks">
            <summary>
            Tick mark of Slider, type of key must be number, and must in closed interval [min, max], each mark can declare its own style
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Max">
            <summary>
            The maximum value the slider can slide to
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Min">
            <summary>
            The minimum value the slider can slide to
            </summary>
        </member>
        <member name="F:AntDesign.Slider`1._range">
            <summary>
            dual thumb mode
            </summary>
        </member>
        <member name="F:AntDesign.Slider`1._reverse">
            <summary>
            reverse the component
            </summary>
        </member>
        <member name="F:AntDesign.Slider`1._step">
            <summary>
            The granularity the slider can step through values. Must greater than 0, and be divided by (<see cref="P:AntDesign.Slider`1.Max"/> - <see cref="P:AntDesign.Slider`1.Min"/>) . When <see cref="P:AntDesign.Slider`1.Marks"/> no null, <see cref="P:AntDesign.Slider`1.Step"/> can be null.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Vertical">
            <summary>
            If true, the slider will be vertical.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.OnAfterChange">
            <summary>
            Fire when onmouseup is fired.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.OnChange">
            <summary>
            Callback function that is fired when the user changes the slider's value.
            </summary>
        </member>
        <member name="F:AntDesign.Slider`1._isTipFormatterDefault">
            <summary>
            Slider will pass its value to tipFormatter, and display its value in Tooltip
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.TooltipPlacement">
            <summary>
            Set Tooltip display position. Ref Tooltip
            </summary>
        </member>
        <member name="F:AntDesign.Slider`1._tooltipVisible">
            <summary>
            If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.GetTooltipPopupContainer">
            <summary>
            The DOM container of the Tooltip, the default behavior is to create a div element in body.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:AntDesign.Space.Align">
            <summary>
            start | end |center |baseline
            </summary>
        </member>
        <member name="P:AntDesign.Spin.Size">
            <summary>
            small | default | large
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Prefix">
            <summary>
            设置数值的前缀
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Suffix">
            <summary>
            设置数值的后缀
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Title">
            <summary>
            数值的标题
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Value">
            <summary>
            数值内容
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.ValueStyle">
            <summary>
            设置数值的样式
            </summary>
        </member>
        <member name="P:AntDesign.Switch.Control">
            <summary>
            The status of Switch is completely up to the user and no longer 
            automatically changes the data based on the click event.
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.OnFilter">
            <summary>
            Function that determines if the row is displayed when filtered
            <para>
            Parameter 1: The value of the filter item
            </para>
            <para>
            Parameter 2: The value of the column
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.GenerateColumns`1.Range">
            <summary>
            Specific the range of the columns that need to display.
            </summary>
        </member>
        <member name="P:AntDesign.GenerateColumns`1.HideColumnsByName">
            <summary>
            Hide the columns by the property name.
            </summary>
        </member>
        <member name="P:AntDesign.GenerateColumns`1.Definitions">
            <summary>
            An Action to defined each column
            </summary>
            <param name="propertyName">The name of the property binding the column. </param>
            <param name="column">The column instance, you need to explicitly cast to a concrete Column type. </param>
        </member>
        <member name="T:AntDesign.Table.Internal.TItemProxy">
            <summary>
            This class is used to create a instance of interface by DispatchProxy
            </summary>
        </member>
        <member name="P:AntDesign.PropertyColumn`2.Property">
            <summary>
            Defines the value to be displayed in this column's cells.
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.DefaultExpandMaxLevel">
            <summary>
            The max expand level when use DefaultExpandAllRows.
            This attribute is used to avoid endless loop when the tree records have circular reference.
            The default value is 4.
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Resizable">
            <summary>
            Enable resizable column
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.EnableVirtualization">
            <summary>
            Whether to enable virtualization feature or not, only works for .NET 5 and higher
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.AntDesign#ITable#OnColumnInitialized">
            <summary>
            This method will be called when all columns have been set
            </summary>
        </member>
        <member name="F:AntDesign.Table`1._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.PaginationPosition">
            <summary>
            topLeft | topCenter | topRight |bottomLeft | bottomCenter | bottomRight
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.SelectedRows">
            <summary>
            Selected rows across pages
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.SelectAll">
            <summary>
            Select all rows of current page
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.UnselectAll">
            <summary>
            Unselect all rows of current page
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Please use <see cref="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})"/> instead if possible,
            as this method won't correctly select items from invisible rows when virtualization is enabled.
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set all selected items
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:AntDesign.Table`1.SetSelection(`0)">
            <summary>
            Select one item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AntDesign.Table`1.ClearSelectedRows">
            <summary>
            clear current pages' selected rows
            </summary>
        </member>
        <member name="T:AntDesign.TableModels.RowData`1">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.TableModels.RowData`1.Children">
            <summary>
            hold the state of children rows
            </summary>
        </member>
        <member name="T:AntDesign.TableModels.RowData">
            <summary>
            Holds all data that is specific to a row, e.g. the row being expanded or not.
            See <see cref="P:AntDesign.TableModels.RowData.TableDataItem"/> for all properties that are specific to an item instead of a row.
            </summary>
        </member>
        <member name="T:AntDesign.TableModels.TableDataItem`1">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.TableModels.TableDataItem">
            <summary>
            Holds the properties of an item within a table.
            Is unique for each item in a table (e.g. even if the item is displayed more than once,
            there will only be one <see cref="T:AntDesign.TableModels.TableDataItem"/>).
            Therefore, all rows with the same item will be selected/deselected all at once.
            <br/>
            For row specific data, see <see cref="T:AntDesign.TableModels.RowData"/>.
            </summary>
        </member>
        <member name="M:AntDesign.TableModels.SortModel`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.ReuseTabs">
            <summary>
            Reuse of multiple page components within an application
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.TabPaneClass">
            <summary>
            Class name of the inner tab pane.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.Draggable">
            <summary>
            Whether Tab can be dragged and dropped.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.Size">
            <summary>
            The size of tabs.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.Body">
            <summary>
            Templates for customizing page content.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.Locale">
            <summary>
            Localization Settings.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.HidePages">
            <summary>
            Whether to hide the page display and keep only the title tab. Then you can use <see cref="T:AntDesign.ReusePages" /> to show the page conent.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.ReuseTabsRouteData">
            <summary>
            The routing information for the current page, which is a serializable version of <see cref="T:Microsoft.AspNetCore.Components.RouteData"/>.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsService.Pages">
            <summary>
            The page information list of the currently opened page, which can be used for caching and recovery
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Create a tab without navigation, the page doesn't really render until the tab is clicked
            </summary>
            <param name="pageUrl">The url of target page</param>
            <param name="titleTemplate">The title show on the tab</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,System.String)">
            <summary>
            Create a tab without navigation, the page doesn't really render until the tab is clicked
            </summary>
            <param name="pageUrl">The url of target page</param>
            <param name="title">The title show on the tab</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ClosePage(System.String)">
            <summary>
            Close the page corresponding to the specified key
            </summary>
            <param name="key">The specified page's key</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CloseOther(System.String)">
            <summary>
            Close all pages except the page with the specified key
            </summary>
            <param name="key">The specified page's key</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CloseAll">
            <summary>
            Close all pages that is Closable or is not Pinned
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CloseCurrent">
            <summary>
            Close current page
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ReloadPage">
            <summary>
            Reload Current Page
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ReloadPage(System.String)">
            <summary>
            Reload the page corresponding to the specified key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.GetAllAssembly">
            <summary>
            获取所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ScanReuseTabsPageAttribute">
            <summary>
            扫描 ReuseTabsPageAttribute 特性
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.ForceRender">
            <summary>
            Forced render of content in tabs, not lazy render after clicking on tabs
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.Key">
            <summary>
            TabPane's key
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.Tab">
            <summary>
            Show text in <see cref="T:AntDesign.TabPane"/>'s head
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.ActiveKey">
            <summary>
            Current <see cref="T:AntDesign.TabPane"/>'s <see cref="P:AntDesign.TabPane.Key"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.Animated">
            <summary>
            Whether to change tabs with animation. Only works while <see cref="P:AntDesign.Tabs.TabPosition"/> = <see cref="F:AntDesign.TabPosition.Top"/> or <see cref="F:AntDesign.TabPosition.Bottom"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.RenderTabBar">
            <summary>
            Replace the TabBar
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.DefaultActiveKey">
            <summary>
            Initial active <see cref="T:AntDesign.TabPane"/>'s <see cref="P:AntDesign.TabPane.Key"/>, if <see cref="P:AntDesign.Tabs.ActiveKey"/> is not set
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.HideAdd">
            <summary>
            Hide plus icon or not. Only works while <see cref="P:AntDesign.Tabs.Type"/> = <see cref="F:AntDesign.TabType.EditableCard"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.Size">
            <summary>
            Preset tab bar size
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarExtraContent">
            <summary>
            Extra content in tab bar
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarGutter">
            <summary>
            The gap between tabs
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarStyle">
            <summary>
            Tab bar style object
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarClass">
            <summary>
            Tab bar css class
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabPosition">
            <summary>
            Position of tabs
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.Type">
            <summary>
            Basic style of tabs
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnChange">
            <summary>
            Callback executed when active tab is changed
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnEdit">
            <summary>
            Callback executed when tab is added or removed. Only works while <see cref="P:AntDesign.Tabs.Type"/> = <see cref="F:AntDesign.TabType.EditableCard"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnClose">
            <summary>
            Callback when tab is closed
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnTabClick">
            <summary>
            Callback executed when tab is clicked
            </summary>
        </member>
        <member name="M:AntDesign.Tabs.AddTabPane(AntDesign.TabPane)">
            <summary>
            Add <see cref="T:AntDesign.TabPane"/> to <see cref="T:AntDesign.Tabs"/>
            </summary>
            <param name="tabPane">The AntTabPane to be added</param>
            <exception cref="T:System.ArgumentNullException">Key is null</exception>
            <exception cref="T:System.ArgumentException">An AntTabPane with the same key already exists</exception>
        </member>
        <member name="P:AntDesign.Tag.ChildContent">
            <summary>
            Tag content
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Closable">
            <summary>
            Whether the Tag can be closed
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Checkable">
            <summary>
            Whether the Tag can be checked
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Checked">
            <summary>
            Checked status of Tag
            </summary>
        </member>
        <member name="P:AntDesign.Tag.CheckedChanged">
            <summary>
            Callback executed when Tag is checked/unchecked
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Color">
            <summary>
            Tag color. Can either be a predefined color (string)
            or hex color.
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Icon">
            <summary>
            Set the tag's icon 
            </summary>
        </member>
        <member name="P:AntDesign.Tag.OnClose">
            <summary>
            Callback executed when tag is closed
            </summary>
        </member>
        <member name="P:AntDesign.Tag.OnClosing">
            <summary>
            Triggered before true closing, can prevent the closing
            </summary>
        </member>
        <member name="P:AntDesign.Tag.OnClick">
            <summary>
            Callback executed when tag is clicked (it is not called 
            when closing icon is clicked).
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Visible">
            <summary>
            Whether the Tag is closed or not
            </summary>
        </member>
        <member name="P:AntDesign.Timeline.Mode">
            <summary>
            'left' | 'alternate' | 'right'
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.ListStyle">
            <summary>
            A custom CSS style used for rendering the transfer columns
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TitleIconTemplate">
            <summary>
             Customize the icon templates
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ShowIcon">
            <summary>
            show treeNode icon icon
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TitleExpression">
            <summary>
            Specifies a method that returns the text of the node.
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.KeyExpression">
            <summary>
            Specifies a method that returns the key of the node.
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.IconExpression">
            <summary>
            Specifies a method to return the node icon.
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.IsLeafExpression">
            <summary>
            Specifies a method that returns whether the expression is a leaf node.
            </summary>) == args.Node.Key).FirstOrDefault();
        </member>
        <member name="P:AntDesign.TreeSelect`2.ChildrenExpression">
            <summary>
            Specifies a method  to return a child node
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.DisabledExpression">
            <summary>
            Specifies a method to return a disabled node
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ExpandedKeys">
            <summary>
            (Controlled) expands the specified tree node
            </summary>
        </member>
        <member name="F:AntDesign.Tree`1._allNodes">
            <summary>
            All of the node
            </summary>
        </member>
        <member name="F:AntDesign.Tree`1._checkedNodes">
            <summary>
            All the checked nodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowExpand">
            <summary>
            Shows an expansion icon before the node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowLine">
            <summary>
            Shows a connecting line
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowIcon">
            <summary>
            show treeNode icon icon
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.BlockNode">
            <summary>
            Whether treeNode fill remaining horizontal space
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Draggable">
            <summary>
            Whether the node allows drag and drop
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Disabled">
            <summary>
            The tree is disabled
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowLeafIcon">
            <summary>
            Displays the cotyledon icon
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SwitcherIcon">
            <summary>
            Specific the Icon type of switcher
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ChildNodes">
            <summary>
            tree childnodes
            Add values when the node is initialized
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.AddChildNode(AntDesign.TreeNode{`0})">
            <summary>
            Add a node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="P:AntDesign.Tree`1.Selectable">
            <summary>
            Whether can be selected
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Multiple">
            <summary>
            Allows selecting multiple treeNodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedNodesDictionary">
            <summary>
            The selected tree node
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.SelectedNodeAdd(AntDesign.TreeNode{`0})">
            <summary>
            Add the selected node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:AntDesign.Tree`1.SelectedNodeRemove(AntDesign.TreeNode{`0})">
            <summary>
            remove the selected node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:AntDesign.Tree`1.DeselectAll">
            <summary>
            Deselect all selections
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedKey">
            <summary>
            @bind-SelectedKey
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedKeyChanged">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedNode">
            <summary>
            @bind-SelectedNode
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedData">
            <summary>
            @bing-SelectedData
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedKeys">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedNodes">
            <summary>
            The collection of selected nodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedDatas">
            <summary>
            The selected data set
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.UpdateBindData">
            <summary>
            Update binding data
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Checkable">
            <summary>
            Add a Checkbox before the node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckStrictly">
            <summary>
            Check treeNode precisely; parent treeNode and children treeNodes are not associated
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckedKeys">
            <summary>
            Checked  keys
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckedKeysChanged">
            <summary>
             @bind-CheckedKeys
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.CheckAll">
            <summary>
            Checks all nodes
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.UncheckAll">
            <summary>
            Unchecks all nodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultCheckedKeys">
            <summary>
            Specifies the keys of the default checked treeNodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DisableCheckKeys">
            <summary>
            Disable node Checkbox
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.AddOrRemoveCheckNode(AntDesign.TreeNode{`0})">
            <summary>
            Adds or removes a checkbox node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="P:AntDesign.Tree`1.SearchValue">
            <summary>
            search value
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.MatchedStyle">
            <summary>
            Search for matching text styles
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DataSource">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.Tree`1.TitleExpression">
            <summary>
            Specifies a method that returns the text of the node.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.KeyExpression">
            <summary>
            Specifies a method that returns the key of the node.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.IconExpression">
            <summary>
            Specifies a method to return the node icon.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.IsLeafExpression">
            <summary>
            Specifies a method that returns whether the expression is a leaf node.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ChildrenExpression">
            <summary>
            Specifies a method  to return a child node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DisabledExpression">
            <summary>
            Specifies a method to return a disabled node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnNodeLoadDelayAsync">
            <summary>
            Lazy load callbacks
            </summary>
            <remarks>You must use async and the return type is Task, otherwise you may experience load lag and display problems</remarks>
        </member>
        <member name="P:AntDesign.Tree`1.OnClick">
            <summary>
            Click the tree node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDblClick">
            <summary>
            Double-click the node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnContextMenu">
            <summary>
            Right-click tree node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnCheck">
            <summary>
            checked the tree node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnExpandChanged">
            <summary>
            Click the expansion tree node icon to call back
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.IndentTemplate">
            <summary>
            The indentation template
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.TitleTemplate">
            <summary>
            Customize the header template
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.TitleIconTemplate">
            <summary>
             Customize the icon templates
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SwitcherIconTemplate">
            <summary>
            Customize toggle icon templates
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DragItem">
            <summary>
            当前拖拽项
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragStart">
            <summary>
            Called when the drag and drop begins
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragEnter">
            <summary>
            Called when drag and drop into a releasable target
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragLeave">
            <summary>
            Called when drag and drop away from a releasable target
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDrop">
            <summary>
            Triggered when drag-and-drop drops succeed
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragEnd">
            <summary>
            Drag-and-drop end callback
            </summary>
            <remarks>this callback method must be set</remarks>
        </member>
        <member name="M:AntDesign.Tree`1.GetNode(System.String)">
            <summary>
            Get TreeNode from Key
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:AntDesign.Tree`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Find Node
            </summary>
            <param name="predicate">Predicate</param>
            <param name="recursive">Recursive Find</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultExpandAll">
            <summary>
            All tree nodes are expanded by default
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultExpandParent">
            <summary>
            The parent node is expanded by default
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultExpandedKeys">
            <summary>
            Expand the specified tree node by default
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ExpandedKeys">
            <summary>
            (Controlled) expands the specified tree node
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.ExpandAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Expand all nodes
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.CollapseAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Collapse all nodes
            </summary>
        </member>
        <member name="P:AntDesign.TreeEventArgs`1.TargetNode">
            <summary>
            目标节点
            </summary>
        </member>
        <member name="P:AntDesign.TreeEventArgs`1.OriginalEvent">
            <summary>
            原生事件
            </summary>
        </member>
        <member name="P:AntDesign.TreeEventArgs`1.DropBelow">
            <summary>
            Whether to drop dragged node as a sibling (below) or as a child of target node.  
            </summary>
        </member>
        <member name="P:AntDesign.TreeIndent`1.TreeComponent">
            <summary>
            Root Tree
            </summary>
        </member>
        <member name="P:AntDesign.TreeIndent`1.SelfNode">
            <summary>
            Current Node
            </summary>
        </member>
        <member name="M:AntDesign.TreeIndent`1.GetParentNode(AntDesign.TreeNode{`0},System.Int32)">
            <summary>
            To find specific level parent node
            </summary>
            <param name="node"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.TreeNode`1.TreeComponent">
            <summary>
            树控件本身
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.ParentNode">
            <summary>
            上一级节点
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Nodes">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.HasChildNodes">
            <summary>
            Whether child nodes exist
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.TreeLevel">
            <summary>
            Current Node Level
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.NodeIndex">
            <summary>
            record the index in children nodes list of parent node.
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.IsLastNode">
            <summary>
            Determine if it is the last node in the same level nodes.
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddNode(AntDesign.TreeNode{`0})">
            <summary>
            add node to parent node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Find a node
            </summary>
            <param name="predicate">Predicate</param>
            <param name="recursive">Recursive Find</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetParentNodes">
            <summary>
            Obtain the parent data set
            </summary>
            <returns></returns>
        </member>
        <member name="P:AntDesign.TreeNode`1.Key">
            <summary>
            Specifies the unique identifier name of the current node。
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Disabled">
            <summary>
            The disabled state is subject to the parent node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Selected">
            <summary>
            Selected or not
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetSelected(System.Boolean)">
            <summary>
            Setting Selection State
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.Loading">
            <summary>
            Whether the load state is asynchronous (affects the display of the expansion icon)
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.DragTarget">
            <summary>
            Whether or not to release the target
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.DragTargetBottom">
             <summary>
            
             </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetTargetBottom(System.Boolean)">
            <summary>
            Sets the node to release the target location
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.TargetContainer">
             <summary>
            
             </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetParentTargetContainer(System.Boolean)">
            <summary>
            Sets the drag and drop target node container
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetParentChildNodes">
            <summary>
            Gets the children of the parent node
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNode`1.RemoveNode">
            <summary>
            Remove the current node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.IsLeaf">
            <summary>
            Whether it is a leaf node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Expanded">
            <summary>
            Whether it has been expanded
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.Expand(System.Boolean)">
            <summary>
            Expand the node
            </summary>
            <param name="expanded"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.ExpandAll">
            <summary>
            Expand all child nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.CollapseAll">
            <summary>
            Collapse all child nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SwitchAllNodes(AntDesign.TreeNode{`0},System.Boolean)">
            <summary>
            节点展开关闭
            </summary>
            <param name="node"></param>
            <param name="expanded"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.RealDisplay">
            <summary>
            The real expand state, as long as there is a expaneded node on the path, then all the folds below
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.OnSwitcherClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Nodes switch
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.TreeNode`1.SwitcherOpen">
            <summary>
            switcher is opened
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.SwitcherClose">
            <summary>
            switcher is close
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.OpenPropagation(System.Boolean)">
            <summary>
            expaned parents
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Checked">
            <summary>
            According to check the
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.DisableCheckbox">
            <summary>
            Disable checkbox
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.OnCheckBoxClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Triggered when the selection box is clicked
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetChecked(System.Boolean)">
            <summary>
            Set the checkbox state
            </summary>
            <param name="check"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetCheckedDefault(System.Boolean)">
            <summary>
            Set the checkbox state when ini
            </summary>
            <param name="check"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetChildChecked(AntDesign.TreeNode{`0},System.Boolean)">
            <summary>
            Sets the checkbox status of child nodes
            </summary>
            <param name="subnode"></param>
            <param name="check"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetChildCheckedDefault(AntDesign.TreeNode{`0},System.Boolean)">
            <summary>
            Sets the checkbox status of child nodes whern bind default
            </summary>
            <param name="subnode"></param>
            <param name="check"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.UpdateCheckState(System.Nullable{System.Boolean})">
            <summary>
            Update check status
            </summary>
            <param name="halfChecked"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.UpdateCheckStateDefault(System.Nullable{System.Boolean})">
            <summary>
            Update check status when bind default
            </summary>
            <param name="halfChecked"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.Icon">
            <summary>
            The icon in front of the node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Matched">
            <summary>
            title是否包含SearchValue(搜索使用)
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.HasChildMatched">
            <summary>
            子节点存在满足搜索条件，所以夫节点也需要显示
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetParentChildDataItems">
            <summary>
            获得上级数据集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddChildNode(`0)">
            <summary>
            Add child node
            </summary>
            <param name="dataItem"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddNextNode(`0)">
            <summary>
            Add a node next the node
            </summary>
            <param name="dataItem"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddPreviousNode(`0)">
            <summary>
            Add a node before the node
            </summary>
            <param name="dataItem"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.Remove">
            <summary>
            remove
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.MoveInto(AntDesign.TreeNode{`0})">
            <summary>
            The node moves into the child node
            </summary>
            <param name="treeNode">target node</param>
        </member>
        <member name="M:AntDesign.TreeNode`1.MoveUp">
            <summary>
            Move up the nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.MoveDown">
            <summary>
            Move down the node
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.Downgrade">
             <summary>
            
             </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.Upgrade">
            <summary>
            Upgrade nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.DragMoveInto(AntDesign.TreeNode{`0})">
            <summary>
            Drag and drop into child nodes
            </summary>
            <param name="treeNode">目标</param>
        </member>
        <member name="M:AntDesign.TreeNode`1.DragMoveDown(AntDesign.TreeNode{`0})">
            <summary>
            Drag and drop to the bottom of the target
            </summary>
            <param name="treeNode">目标</param>
        </member>
        <member name="P:AntDesign.TreeNodeCheckbox`1.TreeComponent">
            <summary>
            Root Tree
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeCheckbox`1.SelfNode">
            <summary>
            Current Node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.TreeComponent">
            <summary>
            树控件本身
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.SelfNode">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherOpen">
            <summary>
            节点是否处于展开状态
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherClose">
            <summary>
            节点是否处于关闭状态
            </summary>
        </member>
        <member name="F:AntDesign.TreeNodeTitle`1._dragTargetClientX">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeTitle`1.TreeComponent">
            <summary>
            树控件本身
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeTitle`1.SelfNode">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDblClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragStart(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragLeave(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Leaving releases the target
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnter(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragOver(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Can be treated as a child if the target is moved to the right beyond the OffsetX distance  
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDrop(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnd(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Drag the end
            </summary>
            <param name="e"></param>
        </member>
    </members>
</doc>
